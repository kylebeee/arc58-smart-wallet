{
    "name": "RecoveryPlugin",
    "structs": {},
    "methods": [
        {
            "name": "createApplication",
            "args": [
                {
                    "type": "uint64",
                    "name": "creator"
                },
                {
                    "type": "byte[]",
                    "name": "hash"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [
                    "NoOp"
                ],
                "call": []
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "recover",
            "args": [
                {
                    "type": "uint64",
                    "name": "sender"
                },
                {
                    "type": "byte[]",
                    "name": "prehash"
                },
                {
                    "type": "address",
                    "name": "newAdmin"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 0,
                "bytes": 2
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {
                "creator": {
                    "keyType": "AVMString",
                    "valueType": "uint64",
                    "key": "Y3JlYXRvcg=="
                },
                "hash": {
                    "keyType": "AVMString",
                    "valueType": "AVMBytes",
                    "key": "aGFzaA=="
                }
            },
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {}
        }
    },
    "bareActions": {
        "create": [],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        51,
                        75
                    ],
                    "errorMessage": "OnCompletion is not NoOp"
                },
                {
                    "pc": [
                        162
                    ],
                    "errorMessage": "application exists"
                },
                {
                    "pc": [
                        79
                    ],
                    "errorMessage": "can only call when creating"
                },
                {
                    "pc": [
                        54
                    ],
                    "errorMessage": "can only call when not creating"
                },
                {
                    "pc": [
                        112,
                        124,
                        131,
                        158
                    ],
                    "errorMessage": "check GlobalState exists"
                },
                {
                    "pc": [
                        126
                    ],
                    "errorMessage": "prehash mismatch"
                },
                {
                    "pc": [
                        116
                    ],
                    "errorMessage": "sender mismatch"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="
    },
    "byteCode": {
        "approval": "CiACAAEmAgdjcmVhdG9yBGhhc2gxG0EAFYICBKpsqUAEt+UWTTYaAI4CABoAAiJDMRkURDEYRDYaATYaAlcCADYaA4gAJCNDMRkURDEYFEQ2GgE2GgJXAgCIAAIjQ4oCACiL/mcpi/9niYoDACIoZUSL/RJEi/4BASIpZUQSRLEiKGVEF4AEFHts1rIai/+yGrIYgQayECKyAbMiKGVEF3IIRLFJsiAisghJsgeyACOyECKyAbOJ",
        "clear": "CoEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 4,
            "minor": 4,
            "patch": 4
        }
    },
    "events": [],
    "templateVariables": {}
}