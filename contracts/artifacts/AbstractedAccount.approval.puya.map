{
  "version": 3,
  "sources": [
    "/Users/kylebreeding/akita/contracts/joe-arc58/contracts/abstracted_account.algo.ts"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAuBA;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;AAAA;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AA+WE;;AAAA;AAAA;AAAA;;AAAA;AA/WF;;;AA+WE;;;AAAA;;AA9BA;;AAAA;AAAA;AAAA;;AAAA;AAjVF;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAiVE;;;AAAA;;AApBA;;AAAA;AAAA;AAAA;;AAAA;AA7TF;;;AAAA;;;AA6TE;;;AAAA;;AA1BA;;AAAA;AAAA;AAAA;;AAAA;AAnSF;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAmSE;;;AAAA;;AAdA;;AAAA;AAAA;AAAA;;AAAA;AArRF;;;AAqRE;;;AAAA;;AAvCA;;AAAA;AAAA;AAAA;;AAAA;AA9OF;;;AA8OE;;;AAAA;;AAbC;;AAAA;AAAA;AAAA;;AAAA;AAjOH;;;AAAA;;;AAiOG;;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAtCD;;AAAA;AAAA;AAAA;;AAAA;AA3LF;;;AAAA;;;AA2LE;;;AAAA;;AAXA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AARC;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;AAAA;AAAA;AAAA;;AArBD;;AAAA;AAAA;AAAA;;AAAA;AAnJF;;;AAmJE;;;AAAA;;AAZA;;AAAA;AAAA;AAAA;;AAAA;AAvIF;;;AAuIE;;;AAAA;;AAtBC;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAjHH;;;AAAA;;;AAiHG;;;AAAA;;AAAD;;;AAMQ;;AAAJ;;AAAA;AAAA;;;AACO;;AAAJ;;AAAA;AADH;;;;AADF;AAKO;;AAAA;;AAAA;AAAP;AAxHkC;AA0HlC;;AAAA;AAC+B;;AAAoC;;AAApC;AAAA;;;AAAyD;;AAxH1C;AAwH9C;AAAA;AACyD;AAA4D;;AAA1F;AAtHkB;;AAsH7C;AAAA;;;;;;;;;;;AAQF;;;AAEa;;AAtIuB;AAAA;AAAA;AAAA;AAsI3B;AAAP;AAtIkC;AAuIlC;;AAAA;;AASF;;;AA1I+C;AAAA;;AAAA;AAAA;AA4IlC;;AAAuC;;AAAZ;AAAY;AAAQ;AAAA;;AAAA;AAAnD;;AAAA;AAAP;AA/I8C;AAAA;AAAA;AAAA;AAiJf;;AAAA;AAAoD;AAAA;;AAAA;AAAjF;AADF;AAxIoD;AA6InB;AAAA;AAAb;AAElB;;;AAAY;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAgB;AAA5B;;;;AADF;AAzJkC;AA8JlC;;AAAA;;;;;;AA9JkC;AAAA;AAAA;AAAA;AAuKlC;AAMF;;;AA1KgD;AAAA;AAAA;AAAA;AA2KV;;AAAA;AA3KU;AAAA;AAAA;AAAA;AA+FC;;AAAxC;AAAA;;;AACI;;AA2EJ;;AAAA;AAAP;AACyD;AAA4D;;AAA1F;AAzKkB;;AAyK7C;AAAA;;AA3EW;;;;;AAoFb;;;;;;AAEa;;AA1LuB;AAAA;AAAA;AAAA;AA0L3B;AAAP;AAEA;AAzL8C;AAAA;AAAA;AAAA;AA8LpC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AALV;;;AAMS;;;AANT;AAUU;;;AAAA;AAAV;;;AAhLkB;AAAd;;AAEsB;;AAAa;AAAjB;AAAb;;AAAkC;;AAAW;;AAAX;AAA3C;;;AAIU;;AAAA;;AAzBoC;AAAA;AAAA;AAAA;AAyBxC;AAAA;;;AAAmD;;AAAA;;AAAmB;;AAAvB;AAA/C;;;AACY;AAAd;;AAkBJ;;AAAA;;AAZQ;;AAAA;;AAAyB;AAA7B;AAAA;;;AACO;;AAAA;;AAAiB;;AAArB;AADH;;;AAGO;;AAAA;;AAHP;;;AAIO;;AAAA;;AAAe;AAAnB;AAJH;;;AAKG;;AAAY;AAAZ;;AAAmB;;AAAnB;AALH;;;AAOc;AAAd;;AACA;;;AAnB6D;;AAAK;AAAL;AAAA;;;;;AAiLnE;;;AAEiB;;AAAA;AADH;;AAAA;AA/LwC;AAoMd;AAAA;AAAb;AAGvB;;;AACyB;;AAAf;AAAe;AAAiB;;AAAvC;AADH;;;AAEU;;AAA0B;;AAAA;AAAA;;AAAX;;AAAW;AAAjC;AAA2D;AAAT;;AAAS;AAA3D;AAFH;;;;AADF;AAAA;;;;;AAaF;;;AAEkE;;AAAA;AAAA;AAAgB;;AAA1D;;;AACtB;;;AAA0B;AAAP;AAAA;AAEZ;;AAAA;;AAAA;;;AAAP;AAAA;AAQF;;;;;;;AACkE;;AAAA;AAAA;AAAgB;;AAA1D;;;AAAhB;AAEF;;;AACK;;AAAuD;;AAAvD;;;AAAP;AAGF;AA/O8C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAmPN;;AAAA;;AAAA;AAC9B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AALV;;;AAMS;;;AANT;AAYkC;;AAAA;;;AAAuB;;AAF7C;;AAAA;AAAA;AAtPiC;;AA2P7C;;AAAA;AAtPoD;AAwPjB;AAAA;AAAA;AAAA;AAAA;AACH;AAAA;;;AAAA;;AAAA;AAAA;AAAA;;AAAA;;;AAEM;;AAAxB;AAFkB;;AAAA;AAAA;;AAAA;AAAf;;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAKjB;AAnNkB;AAAd;;AAEsB;;AAAa;AAAjB;AAAb;;AAA8C;;AAAgB;;AAAvB;AAAL;;AAAA;AAA3C;;;AAIU;;AAAA;;AAzDoC;AAAA;AAAA;AAAA;AAyDxC;AAAA;;;AAAmD;;AAAA;;AAAmB;;AAAvB;AAA/C;;;AACY;AAAd;;AA6BJ;;AAAA;;AAvBQ;;AAAA;;AAAA;AAAA;;AAAyB;AAA7B;AAAA;;;AACO;;AAAA;;AAAiB;;AAArB;AADH;;;AAGO;;AAAA;;AAHP;;;AAIO;;AAAA;;AAAe;AAAnB;AAJH;;;AAKG;;AAAY;AAAZ;;AAAmB;;AAAnB;AALH;;;AAOc;AAAd;;AACA;;;AAGE;;AAA6B;AAA7B;AAAJ;;;AAIW;;AAAA;AAAA;;AAAJ;;AAAA;AAAP;AAEW;AAAA;;AAAJ;AAAP;AACW;AAAA;;AAAa;AAAjB;AAAP;AACuB;AAAZ;;AAAJ;AAAA;AAAwB;;AAAxB;AAAP;AACmB;AAAiC;;AAA7C;AAAP;AA/BkF;;AAAK;AAAL;AAAA;;;;;AAsMT;;;;;AAoB7E;;;AACsD;;AAAA;;;AAnQC;;AAmQV;AAAA;AAAA;AAAA;AAAiB;;;AAA5D;;;;AAaF;;;AAQa;;AAxSuB;AAAA;AAAA;AAAA;AAwS3B;AAAP;AAEY;;AAAA;;AAAA;AACE;;AAAA;;AAAA;AAGA;AAHA;AAAA;;AAAA;AAhSsC;AAuSvC;;AAAA;AAAb;AAAA;;AAQF;;;AAEa;;AA5TuB;AAAA;AAAA;AAAA;AA4T3B;AAAP;AAEY;;AAAA;;AAAA;AAnTwC;AAqTvC;AAAA;AAAb;;;AAcF;;;AASa;;AAvVuB;AAAA;AAAA;AAAA;AAuV3B;AAAP;AACmC;;AAAA;;;AAxUkB;;AAwU3B;AAAA;AAAlB;AAAA;AAAA;;AAAD;AAAP;AAEY;;AAAA;;AAAA;AACZ;AAAA;;AAAA;AAEc;;AAAA;;AAAA;AAGA;AAHA;AAAA;;AAAA;AAlVsC;AAyVvC;;AAAA;AAAb;AAAA;;AAQF;;;AAEa;;AA9WuB;AAAA;AAAA;AAAA;AA8W3B;AAAP;AAEuC;;AAAA;;;AAhWc;;AAgWvB;AAAA;AAAA;AAAA;AAAA;AAC9B;AAAA;;AAtWoD;AAuWvC;AAAA;AAAb;;",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "@algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 0 1 6 192"
    },
    "8": {
      "op": "bytecblock \"a\" \"c\" \"p\" 0x0000000000000000 \"cp\" 0x0f885493 0x00 \"n\" 0x151f7c75"
    },
    "42": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "44": {
      "op": "bz main_after_if_else@19",
      "stack_out": []
    },
    "47": {
      "op": "pushbytess 0xb4c77d71 0xd24b7556 0x147b6cd6 0x13bc44e4 // method \"createApplication(address,address)void\", method \"arc58_changeAdmin(address)void\", method \"arc58_pluginChangeAdmin(address)void\", method \"arc58_getAdmin()address\"",
      "defined_out": [
        "Method(arc58_changeAdmin(address)void)",
        "Method(arc58_getAdmin()address)",
        "Method(arc58_pluginChangeAdmin(address)void)",
        "Method(createApplication(address,address)void)"
      ],
      "stack_out": [
        "Method(createApplication(address,address)void)",
        "Method(arc58_changeAdmin(address)void)",
        "Method(arc58_pluginChangeAdmin(address)void)",
        "Method(arc58_getAdmin()address)"
      ]
    },
    "69": {
      "op": "bytec 5 // method \"arc58_verifyAuthAddr()void\"",
      "defined_out": [
        "Method(arc58_changeAdmin(address)void)",
        "Method(arc58_getAdmin()address)",
        "Method(arc58_pluginChangeAdmin(address)void)",
        "Method(arc58_verifyAuthAddr()void)",
        "Method(createApplication(address,address)void)"
      ],
      "stack_out": [
        "Method(createApplication(address,address)void)",
        "Method(arc58_changeAdmin(address)void)",
        "Method(arc58_pluginChangeAdmin(address)void)",
        "Method(arc58_getAdmin()address)",
        "Method(arc58_verifyAuthAddr()void)"
      ]
    },
    "71": {
      "op": "pushbytess 0xc95a5d3d 0xe9026da8 0x7c766ddc 0x56f28b58 0xd12dcb61 0x4d372355 0x8a72a750 0xe350b9d4 // method \"arc58_rekeyTo(address,bool)void\", method \"arc58_canCall(uint64,address)bool\", method \"arc58_rekeyToPlugin(uint64)void\", method \"arc58_rekeyToNamedPlugin(string)void\", method \"arc58_addPlugin(uint64,address,uint64,uint64,bool)void\", method \"arc58_removePlugin(uint64,address)void\", method \"arc58_addNamedPlugin(string,uint64,address,uint64,uint64,bool)void\", method \"arc58_removeNamedPlugin(string)void\"",
      "defined_out": [
        "Method(arc58_addNamedPlugin(string,uint64,address,uint64,uint64,bool)void)",
        "Method(arc58_addPlugin(uint64,address,uint64,uint64,bool)void)",
        "Method(arc58_canCall(uint64,address)bool)",
        "Method(arc58_changeAdmin(address)void)",
        "Method(arc58_getAdmin()address)",
        "Method(arc58_pluginChangeAdmin(address)void)",
        "Method(arc58_rekeyTo(address,bool)void)",
        "Method(arc58_rekeyToNamedPlugin(string)void)",
        "Method(arc58_rekeyToPlugin(uint64)void)",
        "Method(arc58_removeNamedPlugin(string)void)",
        "Method(arc58_removePlugin(uint64,address)void)",
        "Method(arc58_verifyAuthAddr()void)",
        "Method(createApplication(address,address)void)"
      ],
      "stack_out": [
        "Method(createApplication(address,address)void)",
        "Method(arc58_changeAdmin(address)void)",
        "Method(arc58_pluginChangeAdmin(address)void)",
        "Method(arc58_getAdmin()address)",
        "Method(arc58_verifyAuthAddr()void)",
        "Method(arc58_rekeyTo(address,bool)void)",
        "Method(arc58_canCall(uint64,address)bool)",
        "Method(arc58_rekeyToPlugin(uint64)void)",
        "Method(arc58_rekeyToNamedPlugin(string)void)",
        "Method(arc58_addPlugin(uint64,address,uint64,uint64,bool)void)",
        "Method(arc58_removePlugin(uint64,address)void)",
        "Method(arc58_addNamedPlugin(string,uint64,address,uint64,uint64,bool)void)",
        "Method(arc58_removeNamedPlugin(string)void)"
      ]
    },
    "113": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(arc58_addNamedPlugin(string,uint64,address,uint64,uint64,bool)void)",
        "Method(arc58_addPlugin(uint64,address,uint64,uint64,bool)void)",
        "Method(arc58_canCall(uint64,address)bool)",
        "Method(arc58_changeAdmin(address)void)",
        "Method(arc58_getAdmin()address)",
        "Method(arc58_pluginChangeAdmin(address)void)",
        "Method(arc58_rekeyTo(address,bool)void)",
        "Method(arc58_rekeyToNamedPlugin(string)void)",
        "Method(arc58_rekeyToPlugin(uint64)void)",
        "Method(arc58_removeNamedPlugin(string)void)",
        "Method(arc58_removePlugin(uint64,address)void)",
        "Method(arc58_verifyAuthAddr()void)",
        "Method(createApplication(address,address)void)",
        "tmp%2#0"
      ],
      "stack_out": [
        "Method(createApplication(address,address)void)",
        "Method(arc58_changeAdmin(address)void)",
        "Method(arc58_pluginChangeAdmin(address)void)",
        "Method(arc58_getAdmin()address)",
        "Method(arc58_verifyAuthAddr()void)",
        "Method(arc58_rekeyTo(address,bool)void)",
        "Method(arc58_canCall(uint64,address)bool)",
        "Method(arc58_rekeyToPlugin(uint64)void)",
        "Method(arc58_rekeyToNamedPlugin(string)void)",
        "Method(arc58_addPlugin(uint64,address,uint64,uint64,bool)void)",
        "Method(arc58_removePlugin(uint64,address)void)",
        "Method(arc58_addNamedPlugin(string,uint64,address,uint64,uint64,bool)void)",
        "Method(arc58_removeNamedPlugin(string)void)",
        "tmp%2#0"
      ]
    },
    "116": {
      "op": "match main_createApplication_route@3 main_arc58_changeAdmin_route@4 main_arc58_pluginChangeAdmin_route@5 main_arc58_getAdmin_route@6 main_arc58_verifyAuthAddr_route@7 main_arc58_rekeyTo_route@8 main_arc58_canCall_route@9 main_arc58_rekeyToPlugin_route@10 main_arc58_rekeyToNamedPlugin_route@11 main_arc58_addPlugin_route@12 main_arc58_removePlugin_route@13 main_arc58_addNamedPlugin_route@14 main_arc58_removeNamedPlugin_route@15",
      "stack_out": []
    },
    "144": {
      "block": "main_after_if_else@19",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "145": {
      "op": "return",
      "stack_out": []
    },
    "146": {
      "block": "main_arc58_removeNamedPlugin_route@15",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%56#0"
      ],
      "stack_out": [
        "tmp%56#0"
      ]
    },
    "148": {
      "op": "!",
      "defined_out": [
        "tmp%57#0"
      ],
      "stack_out": [
        "tmp%57#0"
      ]
    },
    "149": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "150": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%58#0"
      ],
      "stack_out": [
        "tmp%58#0"
      ]
    },
    "152": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "153": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%60#0"
      ],
      "stack_out": [
        "tmp%60#0"
      ]
    },
    "156": {
      "callsub": "contracts/abstracted_account.algo.ts::AbstractedAccount.arc58_removeNamedPlugin",
      "op": "callsub arc58_removeNamedPlugin",
      "stack_out": []
    },
    "159": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "160": {
      "op": "return",
      "stack_out": []
    },
    "161": {
      "block": "main_arc58_addNamedPlugin_route@14",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%51#0"
      ],
      "stack_out": [
        "tmp%51#0"
      ]
    },
    "163": {
      "op": "!",
      "defined_out": [
        "tmp%52#0"
      ],
      "stack_out": [
        "tmp%52#0"
      ]
    },
    "164": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "165": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%53#0"
      ],
      "stack_out": [
        "tmp%53#0"
      ]
    },
    "167": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "168": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%55#0"
      ],
      "stack_out": [
        "tmp%55#0"
      ]
    },
    "171": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[8]%6#0",
        "tmp%55#0"
      ],
      "stack_out": [
        "tmp%55#0",
        "reinterpret_bytes[8]%6#0"
      ]
    },
    "174": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "reinterpret_bytes[32]%8#0",
        "reinterpret_bytes[8]%6#0",
        "tmp%55#0"
      ],
      "stack_out": [
        "tmp%55#0",
        "reinterpret_bytes[8]%6#0",
        "reinterpret_bytes[32]%8#0"
      ]
    },
    "177": {
      "op": "txna ApplicationArgs 4",
      "defined_out": [
        "reinterpret_bytes[32]%8#0",
        "reinterpret_bytes[8]%6#0",
        "reinterpret_bytes[8]%7#0",
        "tmp%55#0"
      ],
      "stack_out": [
        "tmp%55#0",
        "reinterpret_bytes[8]%6#0",
        "reinterpret_bytes[32]%8#0",
        "reinterpret_bytes[8]%7#0"
      ]
    },
    "180": {
      "op": "txna ApplicationArgs 5",
      "defined_out": [
        "reinterpret_bytes[32]%8#0",
        "reinterpret_bytes[8]%6#0",
        "reinterpret_bytes[8]%7#0",
        "reinterpret_bytes[8]%8#0",
        "tmp%55#0"
      ],
      "stack_out": [
        "tmp%55#0",
        "reinterpret_bytes[8]%6#0",
        "reinterpret_bytes[32]%8#0",
        "reinterpret_bytes[8]%7#0",
        "reinterpret_bytes[8]%8#0"
      ]
    },
    "183": {
      "op": "txna ApplicationArgs 6",
      "defined_out": [
        "reinterpret_bytes[1]%2#0",
        "reinterpret_bytes[32]%8#0",
        "reinterpret_bytes[8]%6#0",
        "reinterpret_bytes[8]%7#0",
        "reinterpret_bytes[8]%8#0",
        "tmp%55#0"
      ],
      "stack_out": [
        "tmp%55#0",
        "reinterpret_bytes[8]%6#0",
        "reinterpret_bytes[32]%8#0",
        "reinterpret_bytes[8]%7#0",
        "reinterpret_bytes[8]%8#0",
        "reinterpret_bytes[1]%2#0"
      ]
    },
    "186": {
      "callsub": "contracts/abstracted_account.algo.ts::AbstractedAccount.arc58_addNamedPlugin",
      "op": "callsub arc58_addNamedPlugin",
      "stack_out": []
    },
    "189": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "190": {
      "op": "return",
      "stack_out": []
    },
    "191": {
      "block": "main_arc58_removePlugin_route@13",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%47#0"
      ],
      "stack_out": [
        "tmp%47#0"
      ]
    },
    "193": {
      "op": "!",
      "defined_out": [
        "tmp%48#0"
      ],
      "stack_out": [
        "tmp%48#0"
      ]
    },
    "194": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "195": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%49#0"
      ],
      "stack_out": [
        "tmp%49#0"
      ]
    },
    "197": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "198": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%5#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%5#0"
      ]
    },
    "201": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[32]%7#0",
        "reinterpret_bytes[8]%5#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%5#0",
        "reinterpret_bytes[32]%7#0"
      ]
    },
    "204": {
      "callsub": "contracts/abstracted_account.algo.ts::AbstractedAccount.arc58_removePlugin",
      "op": "callsub arc58_removePlugin",
      "stack_out": []
    },
    "207": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "208": {
      "op": "return",
      "stack_out": []
    },
    "209": {
      "block": "main_arc58_addPlugin_route@12",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%43#0"
      ],
      "stack_out": [
        "tmp%43#0"
      ]
    },
    "211": {
      "op": "!",
      "defined_out": [
        "tmp%44#0"
      ],
      "stack_out": [
        "tmp%44#0"
      ]
    },
    "212": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "213": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%45#0"
      ],
      "stack_out": [
        "tmp%45#0"
      ]
    },
    "215": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "216": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%2#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%2#0"
      ]
    },
    "219": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[32]%6#0",
        "reinterpret_bytes[8]%2#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%2#0",
        "reinterpret_bytes[32]%6#0"
      ]
    },
    "222": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "reinterpret_bytes[32]%6#0",
        "reinterpret_bytes[8]%2#0",
        "reinterpret_bytes[8]%3#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%2#0",
        "reinterpret_bytes[32]%6#0",
        "reinterpret_bytes[8]%3#0"
      ]
    },
    "225": {
      "op": "txna ApplicationArgs 4",
      "defined_out": [
        "reinterpret_bytes[32]%6#0",
        "reinterpret_bytes[8]%2#0",
        "reinterpret_bytes[8]%3#0",
        "reinterpret_bytes[8]%4#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%2#0",
        "reinterpret_bytes[32]%6#0",
        "reinterpret_bytes[8]%3#0",
        "reinterpret_bytes[8]%4#0"
      ]
    },
    "228": {
      "op": "txna ApplicationArgs 5",
      "defined_out": [
        "reinterpret_bytes[1]%1#0",
        "reinterpret_bytes[32]%6#0",
        "reinterpret_bytes[8]%2#0",
        "reinterpret_bytes[8]%3#0",
        "reinterpret_bytes[8]%4#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%2#0",
        "reinterpret_bytes[32]%6#0",
        "reinterpret_bytes[8]%3#0",
        "reinterpret_bytes[8]%4#0",
        "reinterpret_bytes[1]%1#0"
      ]
    },
    "231": {
      "callsub": "contracts/abstracted_account.algo.ts::AbstractedAccount.arc58_addPlugin",
      "op": "callsub arc58_addPlugin",
      "stack_out": []
    },
    "234": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "235": {
      "op": "return",
      "stack_out": []
    },
    "236": {
      "block": "main_arc58_rekeyToNamedPlugin_route@11",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%38#0"
      ],
      "stack_out": [
        "tmp%38#0"
      ]
    },
    "238": {
      "op": "!",
      "defined_out": [
        "tmp%39#0"
      ],
      "stack_out": [
        "tmp%39#0"
      ]
    },
    "239": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "240": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%40#0"
      ],
      "stack_out": [
        "tmp%40#0"
      ]
    },
    "242": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "243": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%42#0"
      ],
      "stack_out": [
        "tmp%42#0"
      ]
    },
    "246": {
      "callsub": "contracts/abstracted_account.algo.ts::AbstractedAccount.arc58_rekeyToNamedPlugin",
      "op": "callsub arc58_rekeyToNamedPlugin",
      "stack_out": []
    },
    "249": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "250": {
      "op": "return",
      "stack_out": []
    },
    "251": {
      "block": "main_arc58_rekeyToPlugin_route@10",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%34#0"
      ],
      "stack_out": [
        "tmp%34#0"
      ]
    },
    "253": {
      "op": "!",
      "defined_out": [
        "tmp%35#0"
      ],
      "stack_out": [
        "tmp%35#0"
      ]
    },
    "254": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "255": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%36#0"
      ],
      "stack_out": [
        "tmp%36#0"
      ]
    },
    "257": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "258": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%1#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%1#0"
      ]
    },
    "261": {
      "callsub": "contracts/abstracted_account.algo.ts::AbstractedAccount.arc58_rekeyToPlugin",
      "op": "callsub arc58_rekeyToPlugin",
      "stack_out": []
    },
    "264": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "265": {
      "op": "return",
      "stack_out": []
    },
    "266": {
      "block": "main_arc58_canCall_route@9",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%29#0"
      ],
      "stack_out": [
        "tmp%29#0"
      ]
    },
    "268": {
      "op": "!",
      "defined_out": [
        "tmp%30#0"
      ],
      "stack_out": [
        "tmp%30#0"
      ]
    },
    "269": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "270": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%31#0"
      ],
      "stack_out": [
        "tmp%31#0"
      ]
    },
    "272": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "273": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%0#0"
      ]
    },
    "276": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[32]%5#0",
        "reinterpret_bytes[8]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%0#0",
        "reinterpret_bytes[32]%5#0"
      ]
    },
    "279": {
      "callsub": "contracts/abstracted_account.algo.ts::AbstractedAccount.arc58_canCall",
      "op": "callsub arc58_canCall",
      "defined_out": [
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0"
      ]
    },
    "282": {
      "op": "bytec 6 // 0x00",
      "defined_out": [
        "0x00",
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0",
        "0x00"
      ]
    },
    "284": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "0x00",
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0",
        "0x00",
        "0"
      ]
    },
    "285": {
      "op": "uncover 2",
      "stack_out": [
        "0x00",
        "0",
        "to_encode%0#0"
      ]
    },
    "287": {
      "op": "setbit",
      "defined_out": [
        "encoded_bool%0#0"
      ],
      "stack_out": [
        "encoded_bool%0#0"
      ]
    },
    "288": {
      "op": "bytec 8 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_bool%0#0"
      ],
      "stack_out": [
        "encoded_bool%0#0",
        "0x151f7c75"
      ]
    },
    "290": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_bool%0#0"
      ]
    },
    "291": {
      "op": "concat",
      "defined_out": [
        "tmp%33#0"
      ],
      "stack_out": [
        "tmp%33#0"
      ]
    },
    "292": {
      "op": "log",
      "stack_out": []
    },
    "293": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "294": {
      "op": "return",
      "stack_out": []
    },
    "295": {
      "block": "main_arc58_rekeyTo_route@8",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%25#0"
      ],
      "stack_out": [
        "tmp%25#0"
      ]
    },
    "297": {
      "op": "!",
      "defined_out": [
        "tmp%26#0"
      ],
      "stack_out": [
        "tmp%26#0"
      ]
    },
    "298": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "299": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%27#0"
      ],
      "stack_out": [
        "tmp%27#0"
      ]
    },
    "301": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "302": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[32]%4#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%4#0"
      ]
    },
    "305": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[1]%0#0",
        "reinterpret_bytes[32]%4#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%4#0",
        "reinterpret_bytes[1]%0#0"
      ]
    },
    "308": {
      "callsub": "contracts/abstracted_account.algo.ts::AbstractedAccount.arc58_rekeyTo",
      "op": "callsub arc58_rekeyTo",
      "stack_out": []
    },
    "311": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "312": {
      "op": "return",
      "stack_out": []
    },
    "313": {
      "block": "main_arc58_verifyAuthAddr_route@7",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%21#0"
      ]
    },
    "315": {
      "op": "!",
      "defined_out": [
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%22#0"
      ]
    },
    "316": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "317": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%23#0"
      ]
    },
    "319": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "320": {
      "callsub": "contracts/abstracted_account.algo.ts::AbstractedAccount.arc58_verifyAuthAddr",
      "op": "callsub arc58_verifyAuthAddr"
    },
    "323": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "324": {
      "op": "return",
      "stack_out": []
    },
    "325": {
      "block": "main_arc58_getAdmin_route@6",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0"
      ]
    },
    "327": {
      "op": "!",
      "defined_out": [
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0"
      ]
    },
    "328": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "329": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%17#0"
      ]
    },
    "331": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "332": {
      "callsub": "contracts/abstracted_account.algo.ts::AbstractedAccount.arc58_getAdmin",
      "op": "callsub arc58_getAdmin",
      "defined_out": [
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%19#0"
      ]
    },
    "335": {
      "op": "bytec 8 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%19#0",
        "0x151f7c75"
      ]
    },
    "337": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%19#0"
      ]
    },
    "338": {
      "op": "concat",
      "defined_out": [
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%20#0"
      ]
    },
    "339": {
      "op": "log",
      "stack_out": []
    },
    "340": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "341": {
      "op": "return",
      "stack_out": []
    },
    "342": {
      "block": "main_arc58_pluginChangeAdmin_route@5",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "344": {
      "op": "!",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "345": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "346": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0"
      ]
    },
    "348": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "349": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[32]%3#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%3#0"
      ]
    },
    "352": {
      "callsub": "contracts/abstracted_account.algo.ts::AbstractedAccount.arc58_pluginChangeAdmin",
      "op": "callsub arc58_pluginChangeAdmin",
      "stack_out": []
    },
    "355": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "356": {
      "op": "return",
      "stack_out": []
    },
    "357": {
      "block": "main_arc58_changeAdmin_route@4",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "359": {
      "op": "!",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "360": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "361": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "363": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "364": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[32]%2#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%2#0"
      ]
    },
    "367": {
      "callsub": "contracts/abstracted_account.algo.ts::AbstractedAccount.arc58_changeAdmin",
      "op": "callsub arc58_changeAdmin",
      "stack_out": []
    },
    "370": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "371": {
      "op": "return",
      "stack_out": []
    },
    "372": {
      "block": "main_createApplication_route@3",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "374": {
      "op": "!",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "375": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "376": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "378": {
      "op": "!",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "379": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating",
      "stack_out": []
    },
    "380": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[32]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%0#0"
      ]
    },
    "383": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[32]%0#0",
        "reinterpret_bytes[32]%1#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%0#0",
        "reinterpret_bytes[32]%1#0"
      ]
    },
    "386": {
      "callsub": "contracts/abstracted_account.algo.ts::AbstractedAccount.createApplication",
      "op": "callsub createApplication",
      "stack_out": []
    },
    "389": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "390": {
      "op": "return",
      "stack_out": []
    },
    "391": {
      "subroutine": "contracts/abstracted_account.algo.ts::AbstractedAccount.createApplication",
      "params": {
        "controlledAddress#0": "bytes",
        "admin#0": "bytes"
      },
      "block": "createApplication",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "394": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "396": {
      "op": "frame_dig -2",
      "defined_out": [
        "controlledAddress#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "controlledAddress#0 (copy)"
      ]
    },
    "398": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "399": {
      "op": "bnz createApplication_bool_true@2",
      "stack_out": []
    },
    "402": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "404": {
      "op": "frame_dig -1",
      "defined_out": [
        "admin#0 (copy)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "admin#0 (copy)"
      ]
    },
    "406": {
      "op": "==",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "407": {
      "op": "bz createApplication_bool_false@3",
      "stack_out": []
    },
    "410": {
      "block": "createApplication_bool_true@2",
      "stack_in": [],
      "op": "intc_1 // 1",
      "defined_out": [
        "or_result%0#0"
      ],
      "stack_out": [
        "or_result%0#0"
      ]
    },
    "411": {
      "block": "createApplication_bool_merge@4",
      "stack_in": [
        "or_result%0#0"
      ],
      "error": "Sender must be either controlledAddress or admin",
      "op": "assert // Sender must be either controlledAddress or admin",
      "defined_out": [],
      "stack_out": []
    },
    "412": {
      "op": "frame_dig -1",
      "defined_out": [
        "admin#0 (copy)"
      ],
      "stack_out": [
        "admin#0 (copy)"
      ]
    },
    "414": {
      "op": "frame_dig -2",
      "defined_out": [
        "admin#0 (copy)",
        "controlledAddress#0 (copy)"
      ],
      "stack_out": [
        "admin#0 (copy)",
        "controlledAddress#0 (copy)"
      ]
    },
    "416": {
      "op": "!=",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "417": {
      "op": "assert",
      "stack_out": []
    },
    "418": {
      "op": "bytec_0 // \"a\"",
      "defined_out": [
        "\"a\""
      ],
      "stack_out": [
        "\"a\""
      ]
    },
    "419": {
      "op": "frame_dig -1",
      "stack_out": [
        "\"a\"",
        "admin#0 (copy)"
      ]
    },
    "421": {
      "op": "app_global_put",
      "stack_out": []
    },
    "422": {
      "op": "frame_dig -2",
      "stack_out": [
        "controlledAddress#0 (copy)"
      ]
    },
    "424": {
      "op": "global ZeroAddress",
      "defined_out": [
        "controlledAddress#0 (copy)",
        "tmp%5#0"
      ],
      "stack_out": [
        "controlledAddress#0 (copy)",
        "tmp%5#0"
      ]
    },
    "426": {
      "op": "==",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "427": {
      "op": "bz createApplication_ternary_false@6",
      "stack_out": []
    },
    "430": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "ternary_result%0#0"
      ],
      "stack_out": [
        "ternary_result%0#0"
      ]
    },
    "432": {
      "block": "createApplication_ternary_merge@7",
      "stack_in": [
        "ternary_result%0#0"
      ],
      "op": "bytec_1 // \"c\"",
      "defined_out": [
        "\"c\""
      ],
      "stack_out": [
        "ternary_result%0#0",
        "\"c\""
      ]
    },
    "433": {
      "op": "swap",
      "defined_out": [
        "\"c\"",
        "ternary_result%0#0"
      ],
      "stack_out": [
        "\"c\"",
        "ternary_result%0#0"
      ]
    },
    "434": {
      "op": "app_global_put",
      "stack_out": []
    },
    "435": {
      "op": "bytec_3 // 0x0000000000000000",
      "defined_out": [
        "0x0000000000000000"
      ],
      "stack_out": [
        "0x0000000000000000"
      ]
    },
    "436": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "0x0000000000000000",
        "tmp%8#0"
      ],
      "stack_out": [
        "0x0000000000000000",
        "tmp%8#0"
      ]
    },
    "438": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0"
      ]
    },
    "439": {
      "op": "bytec 4 // \"cp\"",
      "defined_out": [
        "\"cp\"",
        "encoded_tuple_buffer%2#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%2#0",
        "\"cp\""
      ]
    },
    "441": {
      "op": "swap",
      "stack_out": [
        "\"cp\"",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "442": {
      "op": "app_global_put",
      "stack_out": []
    },
    "443": {
      "retsub": true,
      "op": "retsub"
    },
    "444": {
      "block": "createApplication_ternary_false@6",
      "stack_in": [],
      "op": "frame_dig -2",
      "defined_out": [
        "ternary_result%0#0"
      ],
      "stack_out": [
        "ternary_result%0#0"
      ]
    },
    "446": {
      "op": "b createApplication_ternary_merge@7"
    },
    "449": {
      "block": "createApplication_bool_false@3",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "or_result%0#0"
      ],
      "stack_out": [
        "or_result%0#0"
      ]
    },
    "450": {
      "op": "b createApplication_bool_merge@4"
    },
    "453": {
      "subroutine": "contracts/abstracted_account.algo.ts::AbstractedAccount.arc58_changeAdmin",
      "params": {
        "newAdmin#0": "bytes"
      },
      "block": "arc58_changeAdmin",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "456": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "458": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0"
      ]
    },
    "459": {
      "op": "bytec_0 // \"a\"",
      "defined_out": [
        "\"a\"",
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0",
        "\"a\""
      ]
    },
    "460": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "461": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0"
      ]
    },
    "462": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "463": {
      "error": "Sender must be the admin",
      "op": "assert // Sender must be the admin",
      "stack_out": []
    },
    "464": {
      "op": "bytec_0 // \"a\"",
      "stack_out": [
        "\"a\""
      ]
    },
    "465": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"a\"",
        "newAdmin#0 (copy)"
      ],
      "stack_out": [
        "\"a\"",
        "newAdmin#0 (copy)"
      ]
    },
    "467": {
      "op": "app_global_put",
      "stack_out": []
    },
    "468": {
      "retsub": true,
      "op": "retsub"
    },
    "469": {
      "subroutine": "contracts/abstracted_account.algo.ts::AbstractedAccount.arc58_pluginChangeAdmin",
      "params": {
        "newAdmin#0": "bytes"
      },
      "block": "arc58_pluginChangeAdmin",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "472": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "473": {
      "op": "bytec 4 // \"cp\"",
      "defined_out": [
        "\"cp\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"cp\""
      ]
    },
    "475": {
      "op": "app_global_get_ex",
      "defined_out": [
        "key#0",
        "maybe_exists%0#0"
      ],
      "stack_out": [
        "key#0",
        "maybe_exists%0#0"
      ]
    },
    "476": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "key#0"
      ]
    },
    "477": {
      "op": "txn Sender",
      "defined_out": [
        "key#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "key#0",
        "tmp%0#0"
      ]
    },
    "479": {
      "op": "dig 1",
      "defined_out": [
        "key#0",
        "key#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "key#0",
        "tmp%0#0",
        "key#0 (copy)"
      ]
    },
    "481": {
      "op": "intc_0 // 0",
      "stack_out": [
        "key#0",
        "tmp%0#0",
        "key#0 (copy)",
        "0"
      ]
    },
    "482": {
      "op": "extract_uint64",
      "defined_out": [
        "key#0",
        "tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "key#0",
        "tmp%0#0",
        "tmp%2#0"
      ]
    },
    "483": {
      "op": "dup",
      "defined_out": [
        "key#0",
        "tmp%0#0",
        "tmp%2#0",
        "tmp%2#0 (copy)"
      ],
      "stack_out": [
        "key#0",
        "tmp%0#0",
        "tmp%2#0",
        "tmp%2#0 (copy)"
      ]
    },
    "484": {
      "op": "app_params_get AppAddress",
      "defined_out": [
        "check%0#0",
        "key#0",
        "tmp%0#0",
        "tmp%2#0",
        "value%0#0"
      ],
      "stack_out": [
        "key#0",
        "tmp%0#0",
        "tmp%2#0",
        "value%0#0",
        "check%0#0"
      ]
    },
    "486": {
      "error": "application exists",
      "op": "assert // application exists",
      "stack_out": [
        "key#0",
        "tmp%0#0",
        "tmp%2#0",
        "value%0#0"
      ]
    },
    "487": {
      "op": "uncover 2",
      "stack_out": [
        "key#0",
        "tmp%2#0",
        "value%0#0",
        "tmp%0#0"
      ]
    },
    "489": {
      "op": "==",
      "defined_out": [
        "key#0",
        "tmp%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "key#0",
        "tmp%2#0",
        "tmp%3#0"
      ]
    },
    "490": {
      "error": "Sender must be the plugin",
      "op": "assert // Sender must be the plugin",
      "stack_out": [
        "key#0",
        "tmp%2#0"
      ]
    },
    "491": {
      "op": "intc_0 // 0",
      "stack_out": [
        "key#0",
        "tmp%2#0",
        "0"
      ]
    },
    "492": {
      "op": "bytec_1 // \"c\"",
      "defined_out": [
        "\"c\"",
        "0",
        "key#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "key#0",
        "tmp%2#0",
        "0",
        "\"c\""
      ]
    },
    "493": {
      "op": "app_global_get_ex",
      "defined_out": [
        "key#0",
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "key#0",
        "tmp%2#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "494": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "key#0",
        "tmp%2#0",
        "maybe_value%1#0"
      ]
    },
    "495": {
      "op": "acct_params_get AcctAuthAddr",
      "defined_out": [
        "check%1#0",
        "key#0",
        "tmp%2#0",
        "value%1#0"
      ],
      "stack_out": [
        "key#0",
        "tmp%2#0",
        "value%1#0",
        "check%1#0"
      ]
    },
    "497": {
      "error": "account funded",
      "op": "assert // account funded",
      "stack_out": [
        "key#0",
        "tmp%2#0",
        "value%1#0"
      ]
    },
    "498": {
      "op": "swap",
      "stack_out": [
        "key#0",
        "value%1#0",
        "tmp%2#0"
      ]
    },
    "499": {
      "op": "app_params_get AppAddress",
      "defined_out": [
        "check%2#0",
        "key#0",
        "value%1#0",
        "value%2#0"
      ],
      "stack_out": [
        "key#0",
        "value%1#0",
        "value%2#0",
        "check%2#0"
      ]
    },
    "501": {
      "error": "application exists",
      "op": "assert // application exists",
      "stack_out": [
        "key#0",
        "value%1#0",
        "value%2#0"
      ]
    },
    "502": {
      "op": "==",
      "defined_out": [
        "key#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "key#0",
        "tmp%6#0"
      ]
    },
    "503": {
      "error": "This plugin is not in control of the account",
      "op": "assert // This plugin is not in control of the account",
      "stack_out": [
        "key#0"
      ]
    },
    "504": {
      "op": "bytec_2 // \"p\"",
      "defined_out": [
        "\"p\"",
        "key#0"
      ],
      "stack_out": [
        "key#0",
        "\"p\""
      ]
    },
    "505": {
      "op": "swap",
      "stack_out": [
        "\"p\"",
        "key#0"
      ]
    },
    "506": {
      "op": "concat",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "507": {
      "op": "box_get",
      "defined_out": [
        "exists#0",
        "p#0"
      ],
      "stack_out": [
        "p#0",
        "exists#0"
      ]
    },
    "508": {
      "op": "bz arc58_pluginChangeAdmin_bool_false@3",
      "stack_out": [
        "p#0"
      ]
    },
    "511": {
      "op": "frame_dig 0",
      "stack_out": [
        "p#0",
        "p#0"
      ]
    },
    "513": {
      "op": "intc_3 // 192",
      "defined_out": [
        "192",
        "p#0"
      ],
      "stack_out": [
        "p#0",
        "p#0",
        "192"
      ]
    },
    "514": {
      "op": "getbit",
      "defined_out": [
        "is_true%0#0",
        "p#0"
      ],
      "stack_out": [
        "p#0",
        "is_true%0#0"
      ]
    },
    "515": {
      "op": "bytec 6 // 0x00",
      "defined_out": [
        "0x00",
        "is_true%0#0",
        "p#0"
      ],
      "stack_out": [
        "p#0",
        "is_true%0#0",
        "0x00"
      ]
    },
    "517": {
      "op": "intc_0 // 0",
      "stack_out": [
        "p#0",
        "is_true%0#0",
        "0x00",
        "0"
      ]
    },
    "518": {
      "op": "uncover 2",
      "stack_out": [
        "p#0",
        "0x00",
        "0",
        "is_true%0#0"
      ]
    },
    "520": {
      "op": "setbit",
      "defined_out": [
        "encoded_bool%0#0",
        "p#0"
      ],
      "stack_out": [
        "p#0",
        "encoded_bool%0#0"
      ]
    },
    "521": {
      "op": "intc_0 // 0",
      "stack_out": [
        "p#0",
        "encoded_bool%0#0",
        "0"
      ]
    },
    "522": {
      "op": "getbit",
      "defined_out": [
        "p#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "p#0",
        "tmp%8#0"
      ]
    },
    "523": {
      "op": "bz arc58_pluginChangeAdmin_bool_false@3",
      "stack_out": [
        "p#0"
      ]
    },
    "526": {
      "op": "intc_1 // 1",
      "defined_out": [
        "and_result%0#0",
        "p#0"
      ],
      "stack_out": [
        "p#0",
        "and_result%0#0"
      ]
    },
    "527": {
      "block": "arc58_pluginChangeAdmin_bool_merge@4",
      "stack_in": [
        "p#0",
        "and_result%0#0"
      ],
      "error": "This plugin does not have admin privileges",
      "op": "assert // This plugin does not have admin privileges",
      "defined_out": [],
      "stack_out": [
        "p#0"
      ]
    },
    "528": {
      "op": "bytec_0 // \"a\"",
      "defined_out": [
        "\"a\""
      ],
      "stack_out": [
        "p#0",
        "\"a\""
      ]
    },
    "529": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"a\"",
        "newAdmin#0 (copy)"
      ],
      "stack_out": [
        "p#0",
        "\"a\"",
        "newAdmin#0 (copy)"
      ]
    },
    "531": {
      "op": "app_global_put",
      "stack_out": [
        "p#0"
      ]
    },
    "532": {
      "retsub": true,
      "op": "retsub"
    },
    "533": {
      "block": "arc58_pluginChangeAdmin_bool_false@3",
      "stack_in": [
        "p#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "p#0",
        "and_result%0#0"
      ]
    },
    "534": {
      "op": "b arc58_pluginChangeAdmin_bool_merge@4"
    },
    "537": {
      "subroutine": "contracts/abstracted_account.algo.ts::AbstractedAccount.arc58_getAdmin",
      "params": {},
      "block": "arc58_getAdmin",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "538": {
      "op": "bytec_0 // \"a\"",
      "defined_out": [
        "\"a\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"a\""
      ]
    },
    "539": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "540": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "541": {
      "retsub": true,
      "op": "retsub"
    },
    "542": {
      "subroutine": "contracts/abstracted_account.algo.ts::AbstractedAccount.arc58_verifyAuthAddr",
      "params": {},
      "block": "arc58_verifyAuthAddr",
      "stack_in": [],
      "op": "proto 0 0"
    },
    "545": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "546": {
      "op": "bytec_1 // \"c\"",
      "defined_out": [
        "\"c\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"c\""
      ]
    },
    "547": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "548": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "549": {
      "op": "acct_params_get AcctAuthAddr",
      "defined_out": [
        "check%0#0",
        "value%0#0"
      ],
      "stack_out": [
        "value%0#0",
        "check%0#0"
      ]
    },
    "551": {
      "error": "account funded",
      "op": "assert // account funded",
      "stack_out": [
        "value%0#0"
      ]
    },
    "552": {
      "op": "intc_0 // 0",
      "stack_out": [
        "value%0#0",
        "0"
      ]
    },
    "553": {
      "op": "bytec_1 // \"c\"",
      "stack_out": [
        "value%0#0",
        "0",
        "\"c\""
      ]
    },
    "554": {
      "op": "app_global_get_ex",
      "stack_out": [
        "value%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "555": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "value%0#0",
        "maybe_value%0#0"
      ]
    },
    "556": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "maybe_value%0#0",
        "tmp%0#1",
        "value%0#0"
      ],
      "stack_out": [
        "value%0#0",
        "maybe_value%0#0",
        "tmp%0#1"
      ]
    },
    "558": {
      "op": "==",
      "defined_out": [
        "tmp%1#0",
        "value%0#0"
      ],
      "stack_out": [
        "value%0#0",
        "tmp%1#0"
      ]
    },
    "559": {
      "op": "bz arc58_verifyAuthAddr_ternary_false@3",
      "stack_out": [
        "value%0#0"
      ]
    },
    "562": {
      "op": "global ZeroAddress",
      "defined_out": [
        "ternary_result%0#0",
        "value%0#0"
      ],
      "stack_out": [
        "value%0#0",
        "ternary_result%0#0"
      ]
    },
    "564": {
      "block": "arc58_verifyAuthAddr_ternary_merge@4",
      "stack_in": [
        "value%0#0",
        "ternary_result%0#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "value%0#0"
      ],
      "stack_out": [
        "value%0#0",
        "ternary_result%0#0",
        "value%0#0"
      ]
    },
    "566": {
      "op": "==",
      "defined_out": [
        "tmp%1#0",
        "value%0#0"
      ],
      "stack_out": [
        "value%0#0",
        "tmp%1#0"
      ]
    },
    "567": {
      "op": "assert",
      "stack_out": [
        "value%0#0"
      ]
    },
    "568": {
      "op": "bytec_3 // 0x0000000000000000",
      "defined_out": [
        "0x0000000000000000",
        "value%0#0"
      ],
      "stack_out": [
        "value%0#0",
        "0x0000000000000000"
      ]
    },
    "569": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "0x0000000000000000",
        "tmp%3#0",
        "value%0#0"
      ],
      "stack_out": [
        "value%0#0",
        "0x0000000000000000",
        "tmp%3#0"
      ]
    },
    "571": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0",
        "value%0#0"
      ],
      "stack_out": [
        "value%0#0",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "572": {
      "op": "bytec 4 // \"cp\"",
      "defined_out": [
        "\"cp\"",
        "encoded_tuple_buffer%2#0",
        "value%0#0"
      ],
      "stack_out": [
        "value%0#0",
        "encoded_tuple_buffer%2#0",
        "\"cp\""
      ]
    },
    "574": {
      "op": "swap",
      "stack_out": [
        "value%0#0",
        "\"cp\"",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "575": {
      "op": "app_global_put",
      "stack_out": [
        "value%0#0"
      ]
    },
    "576": {
      "retsub": true,
      "op": "retsub"
    },
    "577": {
      "block": "arc58_verifyAuthAddr_ternary_false@3",
      "stack_in": [
        "value%0#0"
      ],
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "ternary_result%0#0"
      ],
      "stack_out": [
        "value%0#0",
        "ternary_result%0#0"
      ]
    },
    "579": {
      "op": "b arc58_verifyAuthAddr_ternary_merge@4"
    },
    "582": {
      "subroutine": "contracts/abstracted_account.algo.ts::AbstractedAccount.arc58_rekeyTo",
      "params": {
        "address#0": "bytes",
        "flash#0": "bytes"
      },
      "block": "arc58_rekeyTo",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "585": {
      "op": "pushbytes \"\"",
      "stack_out": [
        "i#0"
      ]
    },
    "587": {
      "op": "dup",
      "stack_out": [
        "i#0",
        "rekeyedBack#0"
      ]
    },
    "588": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "i#0",
        "rekeyedBack#0",
        "tmp%0#0"
      ]
    },
    "590": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "i#0",
        "rekeyedBack#0",
        "tmp%0#0",
        "0"
      ]
    },
    "591": {
      "op": "bytec_0 // \"a\"",
      "defined_out": [
        "\"a\"",
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "i#0",
        "rekeyedBack#0",
        "tmp%0#0",
        "0",
        "\"a\""
      ]
    },
    "592": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "i#0",
        "rekeyedBack#0",
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "593": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "i#0",
        "rekeyedBack#0",
        "tmp%0#0",
        "maybe_value%0#0"
      ]
    },
    "594": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "i#0",
        "rekeyedBack#0",
        "tmp%1#0"
      ]
    },
    "595": {
      "error": "Sender must be the admin",
      "op": "assert // Sender must be the admin",
      "stack_out": [
        "i#0",
        "rekeyedBack#0"
      ]
    },
    "596": {
      "op": "itxn_begin"
    },
    "597": {
      "op": "intc_0 // 0",
      "stack_out": [
        "i#0",
        "rekeyedBack#0",
        "0"
      ]
    },
    "598": {
      "op": "bytec_1 // \"c\"",
      "defined_out": [
        "\"c\"",
        "0"
      ],
      "stack_out": [
        "i#0",
        "rekeyedBack#0",
        "0",
        "\"c\""
      ]
    },
    "599": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "i#0",
        "rekeyedBack#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "600": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "i#0",
        "rekeyedBack#0",
        "maybe_value%1#0"
      ]
    },
    "601": {
      "op": "pushbytes \"rekeying abstracted account\"",
      "defined_out": [
        "\"rekeying abstracted account\"",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "i#0",
        "rekeyedBack#0",
        "maybe_value%1#0",
        "\"rekeying abstracted account\""
      ]
    },
    "630": {
      "op": "itxn_field Note",
      "stack_out": [
        "i#0",
        "rekeyedBack#0",
        "maybe_value%1#0"
      ]
    },
    "632": {
      "op": "frame_dig -2",
      "defined_out": [
        "address#0 (copy)",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "i#0",
        "rekeyedBack#0",
        "maybe_value%1#0",
        "address#0 (copy)"
      ]
    },
    "634": {
      "op": "itxn_field RekeyTo",
      "stack_out": [
        "i#0",
        "rekeyedBack#0",
        "maybe_value%1#0"
      ]
    },
    "636": {
      "op": "frame_dig -2",
      "stack_out": [
        "i#0",
        "rekeyedBack#0",
        "maybe_value%1#0",
        "address#0 (copy)"
      ]
    },
    "638": {
      "op": "itxn_field Receiver",
      "stack_out": [
        "i#0",
        "rekeyedBack#0",
        "maybe_value%1#0"
      ]
    },
    "640": {
      "op": "itxn_field Sender",
      "stack_out": [
        "i#0",
        "rekeyedBack#0"
      ]
    },
    "642": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "i#0",
        "rekeyedBack#0",
        "1"
      ]
    },
    "643": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "i#0",
        "rekeyedBack#0"
      ]
    },
    "645": {
      "op": "intc_0 // 0",
      "stack_out": [
        "i#0",
        "rekeyedBack#0",
        "0"
      ]
    },
    "646": {
      "op": "itxn_field Fee",
      "stack_out": [
        "i#0",
        "rekeyedBack#0"
      ]
    },
    "648": {
      "op": "itxn_submit"
    },
    "649": {
      "op": "frame_dig -1",
      "defined_out": [
        "flash#0 (copy)"
      ],
      "stack_out": [
        "i#0",
        "rekeyedBack#0",
        "flash#0 (copy)"
      ]
    },
    "651": {
      "op": "intc_0 // 0",
      "stack_out": [
        "i#0",
        "rekeyedBack#0",
        "flash#0 (copy)",
        "0"
      ]
    },
    "652": {
      "op": "getbit",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "i#0",
        "rekeyedBack#0",
        "tmp%2#0"
      ]
    },
    "653": {
      "op": "bz arc58_rekeyTo_after_if_else@3",
      "stack_out": [
        "i#0",
        "rekeyedBack#0"
      ]
    },
    "656": {
      "op": "intc_0 // 0",
      "defined_out": [
        "rekeyedBack#0"
      ],
      "stack_out": [
        "i#0",
        "rekeyedBack#0",
        "rekeyedBack#0"
      ]
    },
    "657": {
      "op": "frame_bury 1",
      "defined_out": [
        "rekeyedBack#0"
      ],
      "stack_out": [
        "i#0",
        "rekeyedBack#0"
      ]
    },
    "659": {
      "op": "txn GroupIndex",
      "defined_out": [
        "rekeyedBack#0",
        "tmp%0#1"
      ],
      "stack_out": [
        "i#0",
        "rekeyedBack#0",
        "tmp%0#1"
      ]
    },
    "661": {
      "op": "intc_1 // 1",
      "stack_out": [
        "i#0",
        "rekeyedBack#0",
        "tmp%0#1",
        "1"
      ]
    },
    "662": {
      "op": "+",
      "defined_out": [
        "i#0",
        "rekeyedBack#0"
      ],
      "stack_out": [
        "i#0",
        "rekeyedBack#0",
        "i#0"
      ]
    },
    "663": {
      "op": "frame_bury 0",
      "defined_out": [
        "i#0",
        "rekeyedBack#0"
      ],
      "stack_out": [
        "i#0",
        "rekeyedBack#0"
      ]
    },
    "665": {
      "block": "arc58_rekeyTo_while_top@5",
      "stack_in": [
        "i#0",
        "rekeyedBack#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "i#0"
      ],
      "stack_out": [
        "i#0",
        "rekeyedBack#0",
        "i#0"
      ]
    },
    "667": {
      "op": "global GroupSize",
      "defined_out": [
        "i#0",
        "tmp%1#1"
      ],
      "stack_out": [
        "i#0",
        "rekeyedBack#0",
        "i#0",
        "tmp%1#1"
      ]
    },
    "669": {
      "op": "<",
      "defined_out": [
        "i#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "i#0",
        "rekeyedBack#0",
        "tmp%2#0"
      ]
    },
    "670": {
      "op": "bz arc58_rekeyTo_block@17",
      "stack_out": [
        "i#0",
        "rekeyedBack#0"
      ]
    },
    "673": {
      "op": "frame_dig 0",
      "stack_out": [
        "i#0",
        "rekeyedBack#0",
        "i#0"
      ]
    },
    "675": {
      "op": "gtxns Sender",
      "defined_out": [
        "i#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "i#0",
        "rekeyedBack#0",
        "tmp%3#0"
      ]
    },
    "677": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "i#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "i#0",
        "rekeyedBack#0",
        "tmp%3#0",
        "0"
      ]
    },
    "678": {
      "op": "bytec_1 // \"c\"",
      "defined_out": [
        "\"c\"",
        "0",
        "i#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "i#0",
        "rekeyedBack#0",
        "tmp%3#0",
        "0",
        "\"c\""
      ]
    },
    "679": {
      "op": "app_global_get_ex",
      "defined_out": [
        "i#0",
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "i#0",
        "rekeyedBack#0",
        "tmp%3#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "680": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "i#0",
        "rekeyedBack#0",
        "tmp%3#0",
        "maybe_value%0#0"
      ]
    },
    "681": {
      "op": "==",
      "defined_out": [
        "i#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "i#0",
        "rekeyedBack#0",
        "tmp%4#0"
      ]
    },
    "682": {
      "op": "bz arc58_rekeyTo_after_if_else@9",
      "stack_out": [
        "i#0",
        "rekeyedBack#0"
      ]
    },
    "685": {
      "op": "frame_dig 0",
      "stack_out": [
        "i#0",
        "rekeyedBack#0",
        "i#0"
      ]
    },
    "687": {
      "op": "gtxns RekeyTo",
      "defined_out": [
        "i#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "i#0",
        "rekeyedBack#0",
        "tmp%5#0"
      ]
    },
    "689": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "i#0",
        "tmp%5#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "i#0",
        "rekeyedBack#0",
        "tmp%5#0",
        "tmp%6#0"
      ]
    },
    "691": {
      "op": "==",
      "defined_out": [
        "i#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "i#0",
        "rekeyedBack#0",
        "tmp%7#0"
      ]
    },
    "692": {
      "op": "bz arc58_rekeyTo_after_if_else@9",
      "stack_out": [
        "i#0",
        "rekeyedBack#0"
      ]
    },
    "695": {
      "op": "intc_1 // 1",
      "defined_out": [
        "i#0",
        "rekeyedBack#0"
      ],
      "stack_out": [
        "i#0",
        "rekeyedBack#0",
        "rekeyedBack#0"
      ]
    },
    "696": {
      "op": "frame_bury 1",
      "defined_out": [
        "i#0",
        "rekeyedBack#0"
      ],
      "stack_out": [
        "i#0",
        "rekeyedBack#0"
      ]
    },
    "698": {
      "block": "arc58_rekeyTo_block@17",
      "stack_in": [
        "i#0",
        "rekeyedBack#0"
      ],
      "op": "frame_dig 1",
      "defined_out": [
        "rekeyedBack#0"
      ],
      "stack_out": [
        "i#0",
        "rekeyedBack#0",
        "rekeyedBack#0"
      ]
    },
    "700": {
      "op": "assert",
      "stack_out": [
        "i#0",
        "rekeyedBack#0"
      ]
    },
    "701": {
      "block": "arc58_rekeyTo_after_if_else@3",
      "stack_in": [
        "i#0",
        "rekeyedBack#0"
      ],
      "retsub": true,
      "op": "retsub"
    },
    "702": {
      "block": "arc58_rekeyTo_after_if_else@9",
      "stack_in": [
        "i#0",
        "rekeyedBack#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "i#0"
      ],
      "stack_out": [
        "i#0",
        "rekeyedBack#0",
        "i#0"
      ]
    },
    "704": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "i#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "i#0",
        "rekeyedBack#0",
        "tmp%8#0"
      ]
    },
    "706": {
      "op": "intc_2 // 6",
      "defined_out": [
        "6",
        "i#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "i#0",
        "rekeyedBack#0",
        "tmp%8#0",
        "6"
      ]
    },
    "707": {
      "op": "==",
      "defined_out": [
        "i#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "i#0",
        "rekeyedBack#0",
        "tmp%9#0"
      ]
    },
    "708": {
      "op": "bz arc58_rekeyTo_after_if_else@15",
      "stack_out": [
        "i#0",
        "rekeyedBack#0"
      ]
    },
    "711": {
      "op": "frame_dig 0",
      "stack_out": [
        "i#0",
        "rekeyedBack#0",
        "i#0"
      ]
    },
    "713": {
      "op": "gtxns ApplicationID",
      "defined_out": [
        "i#0",
        "tmp%10#0"
      ],
      "stack_out": [
        "i#0",
        "rekeyedBack#0",
        "tmp%10#0"
      ]
    },
    "715": {
      "op": "global CurrentApplicationID",
      "defined_out": [
        "i#0",
        "tmp%10#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "i#0",
        "rekeyedBack#0",
        "tmp%10#0",
        "tmp%11#0"
      ]
    },
    "717": {
      "op": "==",
      "defined_out": [
        "i#0",
        "tmp%12#0"
      ],
      "stack_out": [
        "i#0",
        "rekeyedBack#0",
        "tmp%12#0"
      ]
    },
    "718": {
      "op": "bz arc58_rekeyTo_after_if_else@15",
      "stack_out": [
        "i#0",
        "rekeyedBack#0"
      ]
    },
    "721": {
      "op": "frame_dig 0",
      "stack_out": [
        "i#0",
        "rekeyedBack#0",
        "i#0"
      ]
    },
    "723": {
      "op": "gtxns OnCompletion",
      "defined_out": [
        "i#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "i#0",
        "rekeyedBack#0",
        "tmp%13#0"
      ]
    },
    "725": {
      "op": "bnz arc58_rekeyTo_after_if_else@15",
      "stack_out": [
        "i#0",
        "rekeyedBack#0"
      ]
    },
    "728": {
      "op": "frame_dig 0",
      "stack_out": [
        "i#0",
        "rekeyedBack#0",
        "i#0"
      ]
    },
    "730": {
      "op": "gtxns NumAppArgs",
      "defined_out": [
        "i#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "i#0",
        "rekeyedBack#0",
        "tmp%15#0"
      ]
    },
    "732": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "i#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "i#0",
        "rekeyedBack#0",
        "tmp%15#0",
        "1"
      ]
    },
    "733": {
      "op": "==",
      "defined_out": [
        "i#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "i#0",
        "rekeyedBack#0",
        "tmp%16#0"
      ]
    },
    "734": {
      "op": "bz arc58_rekeyTo_after_if_else@15",
      "stack_out": [
        "i#0",
        "rekeyedBack#0"
      ]
    },
    "737": {
      "op": "frame_dig 0",
      "stack_out": [
        "i#0",
        "rekeyedBack#0",
        "i#0"
      ]
    },
    "739": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "i#0"
      ],
      "stack_out": [
        "i#0",
        "rekeyedBack#0",
        "i#0",
        "0"
      ]
    },
    "740": {
      "op": "gtxnsas ApplicationArgs",
      "defined_out": [
        "i#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "i#0",
        "rekeyedBack#0",
        "tmp%17#0"
      ]
    },
    "742": {
      "op": "bytec 5 // method \"arc58_verifyAuthAddr()void\"",
      "defined_out": [
        "Method(arc58_verifyAuthAddr()void)",
        "i#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "i#0",
        "rekeyedBack#0",
        "tmp%17#0",
        "Method(arc58_verifyAuthAddr()void)"
      ]
    },
    "744": {
      "op": "==",
      "defined_out": [
        "i#0",
        "tmp%18#0"
      ],
      "stack_out": [
        "i#0",
        "rekeyedBack#0",
        "tmp%18#0"
      ]
    },
    "745": {
      "op": "bz arc58_rekeyTo_after_if_else@15",
      "stack_out": [
        "i#0",
        "rekeyedBack#0"
      ]
    },
    "748": {
      "op": "intc_1 // 1",
      "defined_out": [
        "i#0",
        "rekeyedBack#0"
      ],
      "stack_out": [
        "i#0",
        "rekeyedBack#0",
        "rekeyedBack#0"
      ]
    },
    "749": {
      "op": "frame_bury 1",
      "defined_out": [
        "i#0",
        "rekeyedBack#0"
      ],
      "stack_out": [
        "i#0",
        "rekeyedBack#0"
      ]
    },
    "751": {
      "op": "b arc58_rekeyTo_block@17"
    },
    "754": {
      "block": "arc58_rekeyTo_after_if_else@15",
      "stack_in": [
        "i#0",
        "rekeyedBack#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "i#0"
      ],
      "stack_out": [
        "i#0",
        "rekeyedBack#0",
        "i#0"
      ]
    },
    "756": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "i#0"
      ],
      "stack_out": [
        "i#0",
        "rekeyedBack#0",
        "i#0",
        "1"
      ]
    },
    "757": {
      "op": "+",
      "stack_out": [
        "i#0",
        "rekeyedBack#0",
        "i#0"
      ]
    },
    "758": {
      "op": "frame_bury 0",
      "defined_out": [
        "i#0"
      ],
      "stack_out": [
        "i#0",
        "rekeyedBack#0"
      ]
    },
    "760": {
      "op": "b arc58_rekeyTo_while_top@5"
    },
    "763": {
      "subroutine": "contracts/abstracted_account.algo.ts::AbstractedAccount.pluginCallAllowed",
      "params": {
        "app#0": "uint64",
        "caller#0": "bytes"
      },
      "block": "pluginCallAllowed",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "766": {
      "op": "frame_dig -2",
      "defined_out": [
        "app#0 (copy)"
      ],
      "stack_out": [
        "app#0 (copy)"
      ]
    },
    "768": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0"
      ]
    },
    "769": {
      "op": "frame_dig -1",
      "defined_out": [
        "caller#0 (copy)",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "caller#0 (copy)"
      ]
    },
    "771": {
      "op": "concat",
      "defined_out": [
        "key#0"
      ],
      "stack_out": [
        "key#0"
      ]
    },
    "772": {
      "op": "bytec_2 // \"p\"",
      "defined_out": [
        "\"p\"",
        "key#0"
      ],
      "stack_out": [
        "key#0",
        "\"p\""
      ]
    },
    "773": {
      "op": "swap",
      "stack_out": [
        "\"p\"",
        "key#0"
      ]
    },
    "774": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "775": {
      "op": "box_get",
      "defined_out": [
        "exists#0",
        "plugin#0"
      ],
      "stack_out": [
        "plugin#0",
        "exists#0"
      ]
    },
    "776": {
      "op": "bz pluginCallAllowed_bool_false@4",
      "stack_out": [
        "plugin#0"
      ]
    },
    "779": {
      "op": "frame_dig 0",
      "stack_out": [
        "plugin#0",
        "plugin#0"
      ]
    },
    "781": {
      "op": "intc_0 // 0",
      "stack_out": [
        "plugin#0",
        "plugin#0",
        "0"
      ]
    },
    "782": {
      "op": "extract_uint64",
      "defined_out": [
        "plugin#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "plugin#0",
        "tmp%2#0"
      ]
    },
    "783": {
      "op": "global Round",
      "defined_out": [
        "plugin#0",
        "tmp%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "plugin#0",
        "tmp%2#0",
        "tmp%3#0"
      ]
    },
    "785": {
      "op": ">=",
      "defined_out": [
        "plugin#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "plugin#0",
        "tmp%4#0"
      ]
    },
    "786": {
      "op": "bz pluginCallAllowed_bool_false@4",
      "stack_out": [
        "plugin#0"
      ]
    },
    "789": {
      "op": "global Round",
      "defined_out": [
        "plugin#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "plugin#0",
        "tmp%5#0"
      ]
    },
    "791": {
      "op": "frame_dig 0",
      "stack_out": [
        "plugin#0",
        "tmp%5#0",
        "plugin#0"
      ]
    },
    "793": {
      "op": "dup",
      "defined_out": [
        "plugin#0",
        "plugin#0 (copy)",
        "tmp%5#0"
      ],
      "stack_out": [
        "plugin#0",
        "tmp%5#0",
        "plugin#0 (copy)",
        "plugin#0 (copy)"
      ]
    },
    "794": {
      "op": "cover 2",
      "stack_out": [
        "plugin#0",
        "plugin#0",
        "tmp%5#0",
        "plugin#0 (copy)"
      ]
    },
    "796": {
      "op": "pushint 16 // 16",
      "defined_out": [
        "16",
        "plugin#0",
        "plugin#0 (copy)",
        "tmp%5#0"
      ],
      "stack_out": [
        "plugin#0",
        "plugin#0",
        "tmp%5#0",
        "plugin#0 (copy)",
        "16"
      ]
    },
    "798": {
      "op": "extract_uint64",
      "defined_out": [
        "plugin#0",
        "tmp%5#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "plugin#0",
        "plugin#0",
        "tmp%5#0",
        "tmp%7#0"
      ]
    },
    "799": {
      "op": "-",
      "defined_out": [
        "plugin#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "plugin#0",
        "plugin#0",
        "tmp%8#0"
      ]
    },
    "800": {
      "op": "swap",
      "stack_out": [
        "plugin#0",
        "tmp%8#0",
        "plugin#0"
      ]
    },
    "801": {
      "op": "pushint 8 // 8",
      "defined_out": [
        "8",
        "plugin#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "plugin#0",
        "tmp%8#0",
        "plugin#0",
        "8"
      ]
    },
    "803": {
      "op": "extract_uint64",
      "defined_out": [
        "plugin#0",
        "tmp%10#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "plugin#0",
        "tmp%8#0",
        "tmp%10#0"
      ]
    },
    "804": {
      "op": ">=",
      "defined_out": [
        "plugin#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "plugin#0",
        "tmp%11#0"
      ]
    },
    "805": {
      "op": "bz pluginCallAllowed_bool_false@4",
      "stack_out": [
        "plugin#0"
      ]
    },
    "808": {
      "op": "intc_1 // 1",
      "defined_out": [
        "and_result%0#0",
        "plugin#0"
      ],
      "stack_out": [
        "plugin#0",
        "and_result%0#0"
      ]
    },
    "809": {
      "block": "pluginCallAllowed_bool_merge@5",
      "stack_in": [
        "plugin#0",
        "and_result%0#0"
      ],
      "op": "swap",
      "defined_out": [
        "and_result%0#0"
      ]
    },
    "810": {
      "retsub": true,
      "op": "retsub"
    },
    "811": {
      "block": "pluginCallAllowed_bool_false@4",
      "stack_in": [
        "plugin#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "plugin#0",
        "and_result%0#0"
      ]
    },
    "812": {
      "op": "b pluginCallAllowed_bool_merge@5"
    },
    "815": {
      "subroutine": "contracts/abstracted_account.algo.ts::AbstractedAccount.arc58_canCall",
      "params": {
        "plugin#0": "bytes",
        "address#0": "bytes"
      },
      "block": "arc58_canCall",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "818": {
      "op": "frame_dig -2",
      "defined_out": [
        "plugin#0 (copy)"
      ],
      "stack_out": [
        "plugin#0 (copy)"
      ]
    },
    "820": {
      "op": "btoi",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "821": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0"
      ]
    },
    "822": {
      "op": "global ZeroAddress",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "824": {
      "callsub": "contracts/abstracted_account.algo.ts::AbstractedAccount.pluginCallAllowed",
      "op": "callsub pluginCallAllowed",
      "defined_out": [
        "globalAllowed#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "globalAllowed#0"
      ]
    },
    "827": {
      "op": "bz arc58_canCall_after_if_else@2",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "830": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "1"
      ]
    },
    "831": {
      "op": "swap"
    },
    "832": {
      "retsub": true,
      "op": "retsub"
    },
    "833": {
      "block": "arc58_canCall_after_if_else@2",
      "stack_in": [
        "tmp%0#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0"
      ]
    },
    "835": {
      "op": "frame_dig -1",
      "defined_out": [
        "address#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0",
        "address#0 (copy)"
      ]
    },
    "837": {
      "callsub": "contracts/abstracted_account.algo.ts::AbstractedAccount.pluginCallAllowed",
      "op": "callsub pluginCallAllowed",
      "defined_out": [
        "tmp%0#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%3#0"
      ]
    },
    "840": {
      "op": "swap"
    },
    "841": {
      "retsub": true,
      "op": "retsub"
    },
    "842": {
      "subroutine": "contracts/abstracted_account.algo.ts::AbstractedAccount.arc58_rekeyToPlugin",
      "params": {
        "plugin#0": "bytes"
      },
      "block": "arc58_rekeyToPlugin",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "845": {
      "op": "pushbytes \"\"",
      "stack_out": [
        "i#0"
      ]
    },
    "847": {
      "op": "dupn 2",
      "stack_out": [
        "i#0",
        "rekeyedBack#0",
        "tmp%10#1"
      ]
    },
    "849": {
      "op": "frame_dig -1",
      "defined_out": [
        "plugin#0 (copy)"
      ],
      "stack_out": [
        "i#0",
        "rekeyedBack#0",
        "tmp%10#1",
        "plugin#0 (copy)"
      ]
    },
    "851": {
      "op": "btoi",
      "defined_out": [
        "app#0"
      ],
      "stack_out": [
        "i#0",
        "rekeyedBack#0",
        "tmp%10#1",
        "app#0"
      ]
    },
    "852": {
      "op": "dup",
      "defined_out": [
        "app#0"
      ],
      "stack_out": [
        "i#0",
        "rekeyedBack#0",
        "tmp%10#1",
        "app#0",
        "app#0"
      ]
    },
    "853": {
      "op": "global ZeroAddress",
      "defined_out": [
        "app#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "i#0",
        "rekeyedBack#0",
        "tmp%10#1",
        "app#0",
        "app#0",
        "tmp%1#0"
      ]
    },
    "855": {
      "callsub": "contracts/abstracted_account.algo.ts::AbstractedAccount.pluginCallAllowed",
      "op": "callsub pluginCallAllowed",
      "defined_out": [
        "app#0",
        "globalAllowed#0"
      ],
      "stack_out": [
        "i#0",
        "rekeyedBack#0",
        "tmp%10#1",
        "app#0",
        "globalAllowed#0"
      ]
    },
    "858": {
      "op": "dup",
      "defined_out": [
        "app#0",
        "globalAllowed#0"
      ],
      "stack_out": [
        "i#0",
        "rekeyedBack#0",
        "tmp%10#1",
        "app#0",
        "globalAllowed#0",
        "globalAllowed#0"
      ]
    },
    "859": {
      "op": "bnz arc58_rekeyToPlugin_after_if_else@2",
      "stack_out": [
        "i#0",
        "rekeyedBack#0",
        "tmp%10#1",
        "app#0",
        "globalAllowed#0"
      ]
    },
    "862": {
      "op": "frame_dig 3",
      "stack_out": [
        "i#0",
        "rekeyedBack#0",
        "tmp%10#1",
        "app#0",
        "globalAllowed#0",
        "app#0"
      ]
    },
    "864": {
      "op": "txn Sender",
      "defined_out": [
        "app#0",
        "globalAllowed#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "i#0",
        "rekeyedBack#0",
        "tmp%10#1",
        "app#0",
        "globalAllowed#0",
        "app#0",
        "tmp%3#0"
      ]
    },
    "866": {
      "callsub": "contracts/abstracted_account.algo.ts::AbstractedAccount.pluginCallAllowed",
      "op": "callsub pluginCallAllowed",
      "defined_out": [
        "app#0",
        "globalAllowed#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "i#0",
        "rekeyedBack#0",
        "tmp%10#1",
        "app#0",
        "globalAllowed#0",
        "tmp%4#0"
      ]
    },
    "869": {
      "error": "This sender is not allowed to trigger this plugin",
      "op": "assert // This sender is not allowed to trigger this plugin",
      "stack_out": [
        "i#0",
        "rekeyedBack#0",
        "tmp%10#1",
        "app#0",
        "globalAllowed#0"
      ]
    },
    "870": {
      "block": "arc58_rekeyToPlugin_after_if_else@2",
      "stack_in": [
        "i#0",
        "rekeyedBack#0",
        "tmp%10#1",
        "app#0",
        "globalAllowed#0"
      ],
      "op": "itxn_begin"
    },
    "871": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "i#0",
        "rekeyedBack#0",
        "tmp%10#1",
        "app#0",
        "globalAllowed#0",
        "0"
      ]
    },
    "872": {
      "op": "bytec_1 // \"c\"",
      "defined_out": [
        "\"c\"",
        "0"
      ],
      "stack_out": [
        "i#0",
        "rekeyedBack#0",
        "tmp%10#1",
        "app#0",
        "globalAllowed#0",
        "0",
        "\"c\""
      ]
    },
    "873": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "i#0",
        "rekeyedBack#0",
        "tmp%10#1",
        "app#0",
        "globalAllowed#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "874": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "i#0",
        "rekeyedBack#0",
        "tmp%10#1",
        "app#0",
        "globalAllowed#0",
        "maybe_value%0#0"
      ]
    },
    "875": {
      "op": "intc_0 // 0",
      "stack_out": [
        "i#0",
        "rekeyedBack#0",
        "tmp%10#1",
        "app#0",
        "globalAllowed#0",
        "maybe_value%0#0",
        "0"
      ]
    },
    "876": {
      "op": "bytec_1 // \"c\"",
      "stack_out": [
        "i#0",
        "rekeyedBack#0",
        "tmp%10#1",
        "app#0",
        "globalAllowed#0",
        "maybe_value%0#0",
        "0",
        "\"c\""
      ]
    },
    "877": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%0#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "i#0",
        "rekeyedBack#0",
        "tmp%10#1",
        "app#0",
        "globalAllowed#0",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "878": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "i#0",
        "rekeyedBack#0",
        "tmp%10#1",
        "app#0",
        "globalAllowed#0",
        "maybe_value%0#0",
        "maybe_value%1#0"
      ]
    },
    "879": {
      "op": "frame_dig 3",
      "defined_out": [
        "app#0",
        "maybe_value%0#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "i#0",
        "rekeyedBack#0",
        "tmp%10#1",
        "app#0",
        "globalAllowed#0",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "app#0"
      ]
    },
    "881": {
      "op": "app_params_get AppAddress",
      "defined_out": [
        "app#0",
        "check%0#0",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "value%0#0"
      ],
      "stack_out": [
        "i#0",
        "rekeyedBack#0",
        "tmp%10#1",
        "app#0",
        "globalAllowed#0",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "value%0#0",
        "check%0#0"
      ]
    },
    "883": {
      "error": "application exists",
      "op": "assert // application exists",
      "stack_out": [
        "i#0",
        "rekeyedBack#0",
        "tmp%10#1",
        "app#0",
        "globalAllowed#0",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "value%0#0"
      ]
    },
    "884": {
      "op": "pushbytes \"rekeying to plugin app\"",
      "defined_out": [
        "\"rekeying to plugin app\"",
        "app#0",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "value%0#0"
      ],
      "stack_out": [
        "i#0",
        "rekeyedBack#0",
        "tmp%10#1",
        "app#0",
        "globalAllowed#0",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "value%0#0",
        "\"rekeying to plugin app\""
      ]
    },
    "908": {
      "op": "itxn_field Note",
      "stack_out": [
        "i#0",
        "rekeyedBack#0",
        "tmp%10#1",
        "app#0",
        "globalAllowed#0",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "value%0#0"
      ]
    },
    "910": {
      "op": "itxn_field RekeyTo",
      "stack_out": [
        "i#0",
        "rekeyedBack#0",
        "tmp%10#1",
        "app#0",
        "globalAllowed#0",
        "maybe_value%0#0",
        "maybe_value%1#0"
      ]
    },
    "912": {
      "op": "itxn_field Receiver",
      "stack_out": [
        "i#0",
        "rekeyedBack#0",
        "tmp%10#1",
        "app#0",
        "globalAllowed#0",
        "maybe_value%0#0"
      ]
    },
    "914": {
      "op": "itxn_field Sender",
      "stack_out": [
        "i#0",
        "rekeyedBack#0",
        "tmp%10#1",
        "app#0",
        "globalAllowed#0"
      ]
    },
    "916": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "app#0"
      ],
      "stack_out": [
        "i#0",
        "rekeyedBack#0",
        "tmp%10#1",
        "app#0",
        "globalAllowed#0",
        "1"
      ]
    },
    "917": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "i#0",
        "rekeyedBack#0",
        "tmp%10#1",
        "app#0",
        "globalAllowed#0"
      ]
    },
    "919": {
      "op": "intc_0 // 0",
      "stack_out": [
        "i#0",
        "rekeyedBack#0",
        "tmp%10#1",
        "app#0",
        "globalAllowed#0",
        "0"
      ]
    },
    "920": {
      "op": "itxn_field Fee",
      "stack_out": [
        "i#0",
        "rekeyedBack#0",
        "tmp%10#1",
        "app#0",
        "globalAllowed#0"
      ]
    },
    "922": {
      "op": "itxn_submit"
    },
    "923": {
      "op": "frame_dig 4",
      "defined_out": [
        "app#0",
        "globalAllowed#0"
      ],
      "stack_out": [
        "i#0",
        "rekeyedBack#0",
        "tmp%10#1",
        "app#0",
        "globalAllowed#0",
        "globalAllowed#0"
      ]
    },
    "925": {
      "op": "bz arc58_rekeyToPlugin_ternary_false@8",
      "stack_out": [
        "i#0",
        "rekeyedBack#0",
        "tmp%10#1",
        "app#0",
        "globalAllowed#0"
      ]
    },
    "928": {
      "op": "global ZeroAddress",
      "defined_out": [
        "app#0",
        "globalAllowed#0",
        "ternary_result%1#0"
      ],
      "stack_out": [
        "i#0",
        "rekeyedBack#0",
        "tmp%10#1",
        "app#0",
        "globalAllowed#0",
        "ternary_result%1#0"
      ]
    },
    "930": {
      "block": "arc58_rekeyToPlugin_ternary_merge@9",
      "stack_in": [
        "i#0",
        "rekeyedBack#0",
        "tmp%10#1",
        "app#0",
        "globalAllowed#0",
        "ternary_result%1#0"
      ],
      "op": "frame_dig -1",
      "defined_out": [
        "plugin#0 (copy)"
      ],
      "stack_out": [
        "i#0",
        "rekeyedBack#0",
        "tmp%10#1",
        "app#0",
        "globalAllowed#0",
        "ternary_result%1#0",
        "plugin#0 (copy)"
      ]
    },
    "932": {
      "op": "swap",
      "defined_out": [
        "plugin#0 (copy)",
        "ternary_result%1#0"
      ],
      "stack_out": [
        "i#0",
        "rekeyedBack#0",
        "tmp%10#1",
        "app#0",
        "globalAllowed#0",
        "plugin#0 (copy)",
        "ternary_result%1#0"
      ]
    },
    "933": {
      "op": "concat",
      "defined_out": [
        "key#0"
      ],
      "stack_out": [
        "i#0",
        "rekeyedBack#0",
        "tmp%10#1",
        "app#0",
        "globalAllowed#0",
        "key#0"
      ]
    },
    "934": {
      "op": "bytec 4 // \"cp\"",
      "defined_out": [
        "\"cp\"",
        "key#0"
      ],
      "stack_out": [
        "i#0",
        "rekeyedBack#0",
        "tmp%10#1",
        "app#0",
        "globalAllowed#0",
        "key#0",
        "\"cp\""
      ]
    },
    "936": {
      "op": "dig 1",
      "defined_out": [
        "\"cp\"",
        "key#0",
        "key#0 (copy)"
      ],
      "stack_out": [
        "i#0",
        "rekeyedBack#0",
        "tmp%10#1",
        "app#0",
        "globalAllowed#0",
        "key#0",
        "\"cp\"",
        "key#0 (copy)"
      ]
    },
    "938": {
      "op": "app_global_put",
      "stack_out": [
        "i#0",
        "rekeyedBack#0",
        "tmp%10#1",
        "app#0",
        "globalAllowed#0",
        "key#0"
      ]
    },
    "939": {
      "op": "bytec_2 // \"p\"",
      "defined_out": [
        "\"p\"",
        "key#0"
      ],
      "stack_out": [
        "i#0",
        "rekeyedBack#0",
        "tmp%10#1",
        "app#0",
        "globalAllowed#0",
        "key#0",
        "\"p\""
      ]
    },
    "940": {
      "op": "swap",
      "stack_out": [
        "i#0",
        "rekeyedBack#0",
        "tmp%10#1",
        "app#0",
        "globalAllowed#0",
        "\"p\"",
        "key#0"
      ]
    },
    "941": {
      "op": "concat",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "i#0",
        "rekeyedBack#0",
        "tmp%10#1",
        "app#0",
        "globalAllowed#0",
        "tmp%6#0"
      ]
    },
    "942": {
      "op": "dup",
      "defined_out": [
        "tmp%6#0",
        "tmp%6#0 (copy)"
      ],
      "stack_out": [
        "i#0",
        "rekeyedBack#0",
        "tmp%10#1",
        "app#0",
        "globalAllowed#0",
        "tmp%6#0",
        "tmp%6#0 (copy)"
      ]
    },
    "943": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%2#0",
        "previousValue#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "i#0",
        "rekeyedBack#0",
        "tmp%10#1",
        "app#0",
        "globalAllowed#0",
        "tmp%6#0",
        "previousValue#0",
        "maybe_exists%2#0"
      ]
    },
    "944": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "i#0",
        "rekeyedBack#0",
        "tmp%10#1",
        "app#0",
        "globalAllowed#0",
        "tmp%6#0",
        "previousValue#0"
      ]
    },
    "945": {
      "op": "dup",
      "defined_out": [
        "previousValue#0",
        "previousValue#0 (copy)",
        "tmp%6#0"
      ],
      "stack_out": [
        "i#0",
        "rekeyedBack#0",
        "tmp%10#1",
        "app#0",
        "globalAllowed#0",
        "tmp%6#0",
        "previousValue#0",
        "previousValue#0 (copy)"
      ]
    },
    "946": {
      "error": "Index access is out of bounds",
      "op": "extract 0 8 // on error: Index access is out of bounds",
      "defined_out": [
        "previousValue#0",
        "tmp%6#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "i#0",
        "rekeyedBack#0",
        "tmp%10#1",
        "app#0",
        "globalAllowed#0",
        "tmp%6#0",
        "previousValue#0",
        "tmp%7#0"
      ]
    },
    "949": {
      "op": "dig 1",
      "stack_out": [
        "i#0",
        "rekeyedBack#0",
        "tmp%10#1",
        "app#0",
        "globalAllowed#0",
        "tmp%6#0",
        "previousValue#0",
        "tmp%7#0",
        "previousValue#0 (copy)"
      ]
    },
    "951": {
      "op": "intc_3 // 192",
      "defined_out": [
        "192",
        "previousValue#0",
        "previousValue#0 (copy)",
        "tmp%6#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "i#0",
        "rekeyedBack#0",
        "tmp%10#1",
        "app#0",
        "globalAllowed#0",
        "tmp%6#0",
        "previousValue#0",
        "tmp%7#0",
        "previousValue#0 (copy)",
        "192"
      ]
    },
    "952": {
      "op": "getbit",
      "defined_out": [
        "is_true%0#0",
        "previousValue#0",
        "tmp%6#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "i#0",
        "rekeyedBack#0",
        "tmp%10#1",
        "app#0",
        "globalAllowed#0",
        "tmp%6#0",
        "previousValue#0",
        "tmp%7#0",
        "is_true%0#0"
      ]
    },
    "953": {
      "op": "uncover 2",
      "stack_out": [
        "i#0",
        "rekeyedBack#0",
        "tmp%10#1",
        "app#0",
        "globalAllowed#0",
        "tmp%6#0",
        "tmp%7#0",
        "is_true%0#0",
        "previousValue#0"
      ]
    },
    "955": {
      "error": "Index access is out of bounds",
      "op": "extract 8 8 // on error: Index access is out of bounds",
      "defined_out": [
        "is_true%0#0",
        "tmp%18#0",
        "tmp%6#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "i#0",
        "rekeyedBack#0",
        "tmp%10#1",
        "app#0",
        "globalAllowed#0",
        "tmp%6#0",
        "tmp%7#0",
        "is_true%0#0",
        "tmp%18#0"
      ]
    },
    "958": {
      "op": "global Round",
      "defined_out": [
        "is_true%0#0",
        "tmp%18#0",
        "tmp%6#0",
        "tmp%7#0",
        "to_encode%10#0"
      ],
      "stack_out": [
        "i#0",
        "rekeyedBack#0",
        "tmp%10#1",
        "app#0",
        "globalAllowed#0",
        "tmp%6#0",
        "tmp%7#0",
        "is_true%0#0",
        "tmp%18#0",
        "to_encode%10#0"
      ]
    },
    "960": {
      "op": "itob",
      "defined_out": [
        "is_true%0#0",
        "tmp%18#0",
        "tmp%6#0",
        "tmp%7#0",
        "val_as_bytes%10#0"
      ],
      "stack_out": [
        "i#0",
        "rekeyedBack#0",
        "tmp%10#1",
        "app#0",
        "globalAllowed#0",
        "tmp%6#0",
        "tmp%7#0",
        "is_true%0#0",
        "tmp%18#0",
        "val_as_bytes%10#0"
      ]
    },
    "961": {
      "op": "bytec 6 // 0x00",
      "defined_out": [
        "0x00",
        "is_true%0#0",
        "tmp%18#0",
        "tmp%6#0",
        "tmp%7#0",
        "val_as_bytes%10#0"
      ],
      "stack_out": [
        "i#0",
        "rekeyedBack#0",
        "tmp%10#1",
        "app#0",
        "globalAllowed#0",
        "tmp%6#0",
        "tmp%7#0",
        "is_true%0#0",
        "tmp%18#0",
        "val_as_bytes%10#0",
        "0x00"
      ]
    },
    "963": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "0x00",
        "is_true%0#0",
        "tmp%18#0",
        "tmp%6#0",
        "tmp%7#0",
        "val_as_bytes%10#0"
      ],
      "stack_out": [
        "i#0",
        "rekeyedBack#0",
        "tmp%10#1",
        "app#0",
        "globalAllowed#0",
        "tmp%6#0",
        "tmp%7#0",
        "is_true%0#0",
        "tmp%18#0",
        "val_as_bytes%10#0",
        "0x00",
        "0"
      ]
    },
    "964": {
      "op": "uncover 4",
      "stack_out": [
        "i#0",
        "rekeyedBack#0",
        "tmp%10#1",
        "app#0",
        "globalAllowed#0",
        "tmp%6#0",
        "tmp%7#0",
        "tmp%18#0",
        "val_as_bytes%10#0",
        "0x00",
        "0",
        "is_true%0#0"
      ]
    },
    "966": {
      "op": "setbit",
      "defined_out": [
        "encoded_bool%15#0",
        "tmp%18#0",
        "tmp%6#0",
        "tmp%7#0",
        "val_as_bytes%10#0"
      ],
      "stack_out": [
        "i#0",
        "rekeyedBack#0",
        "tmp%10#1",
        "app#0",
        "globalAllowed#0",
        "tmp%6#0",
        "tmp%7#0",
        "tmp%18#0",
        "val_as_bytes%10#0",
        "encoded_bool%15#0"
      ]
    },
    "967": {
      "op": "uncover 3",
      "stack_out": [
        "i#0",
        "rekeyedBack#0",
        "tmp%10#1",
        "app#0",
        "globalAllowed#0",
        "tmp%6#0",
        "tmp%18#0",
        "val_as_bytes%10#0",
        "encoded_bool%15#0",
        "tmp%7#0"
      ]
    },
    "969": {
      "op": "uncover 3",
      "stack_out": [
        "i#0",
        "rekeyedBack#0",
        "tmp%10#1",
        "app#0",
        "globalAllowed#0",
        "tmp%6#0",
        "val_as_bytes%10#0",
        "encoded_bool%15#0",
        "tmp%7#0",
        "tmp%18#0"
      ]
    },
    "971": {
      "op": "concat",
      "defined_out": [
        "encoded_bool%15#0",
        "encoded_tuple_buffer%5#0",
        "tmp%6#0",
        "val_as_bytes%10#0"
      ],
      "stack_out": [
        "i#0",
        "rekeyedBack#0",
        "tmp%10#1",
        "app#0",
        "globalAllowed#0",
        "tmp%6#0",
        "val_as_bytes%10#0",
        "encoded_bool%15#0",
        "encoded_tuple_buffer%5#0"
      ]
    },
    "972": {
      "op": "uncover 2",
      "stack_out": [
        "i#0",
        "rekeyedBack#0",
        "tmp%10#1",
        "app#0",
        "globalAllowed#0",
        "tmp%6#0",
        "encoded_bool%15#0",
        "encoded_tuple_buffer%5#0",
        "val_as_bytes%10#0"
      ]
    },
    "974": {
      "op": "concat",
      "defined_out": [
        "encoded_bool%15#0",
        "encoded_tuple_buffer%6#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "i#0",
        "rekeyedBack#0",
        "tmp%10#1",
        "app#0",
        "globalAllowed#0",
        "tmp%6#0",
        "encoded_bool%15#0",
        "encoded_tuple_buffer%6#0"
      ]
    },
    "975": {
      "op": "swap",
      "stack_out": [
        "i#0",
        "rekeyedBack#0",
        "tmp%10#1",
        "app#0",
        "globalAllowed#0",
        "tmp%6#0",
        "encoded_tuple_buffer%6#0",
        "encoded_bool%15#0"
      ]
    },
    "976": {
      "op": "concat",
      "defined_out": [
        "newValue#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "i#0",
        "rekeyedBack#0",
        "tmp%10#1",
        "app#0",
        "globalAllowed#0",
        "tmp%6#0",
        "newValue#0"
      ]
    },
    "977": {
      "op": "box_put",
      "stack_out": [
        "i#0",
        "rekeyedBack#0",
        "tmp%10#1",
        "app#0",
        "globalAllowed#0"
      ]
    },
    "978": {
      "op": "intc_0 // 0",
      "defined_out": [
        "rekeyedBack#0"
      ],
      "stack_out": [
        "i#0",
        "rekeyedBack#0",
        "tmp%10#1",
        "app#0",
        "globalAllowed#0",
        "rekeyedBack#0"
      ]
    },
    "979": {
      "op": "frame_bury 1",
      "defined_out": [
        "rekeyedBack#0"
      ],
      "stack_out": [
        "i#0",
        "rekeyedBack#0",
        "tmp%10#1",
        "app#0",
        "globalAllowed#0"
      ]
    },
    "981": {
      "op": "txn GroupIndex",
      "defined_out": [
        "rekeyedBack#0",
        "tmp%0#1"
      ],
      "stack_out": [
        "i#0",
        "rekeyedBack#0",
        "tmp%10#1",
        "app#0",
        "globalAllowed#0",
        "tmp%0#1"
      ]
    },
    "983": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "rekeyedBack#0",
        "tmp%0#1"
      ],
      "stack_out": [
        "i#0",
        "rekeyedBack#0",
        "tmp%10#1",
        "app#0",
        "globalAllowed#0",
        "tmp%0#1",
        "1"
      ]
    },
    "984": {
      "op": "+",
      "defined_out": [
        "i#0",
        "rekeyedBack#0"
      ],
      "stack_out": [
        "i#0",
        "rekeyedBack#0",
        "tmp%10#1",
        "app#0",
        "globalAllowed#0",
        "i#0"
      ]
    },
    "985": {
      "op": "frame_bury 0",
      "defined_out": [
        "i#0",
        "rekeyedBack#0"
      ],
      "stack_out": [
        "i#0",
        "rekeyedBack#0",
        "tmp%10#1",
        "app#0",
        "globalAllowed#0"
      ]
    },
    "987": {
      "block": "arc58_rekeyToPlugin_while_top@11",
      "stack_in": [
        "i#0",
        "rekeyedBack#0",
        "tmp%10#1",
        "app#0",
        "globalAllowed#0"
      ],
      "op": "global GroupSize",
      "defined_out": [
        "tmp%1#1"
      ],
      "stack_out": [
        "i#0",
        "rekeyedBack#0",
        "tmp%10#1",
        "app#0",
        "globalAllowed#0",
        "tmp%1#1"
      ]
    },
    "989": {
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%1#1",
        "tmp%2#1"
      ],
      "stack_out": [
        "i#0",
        "rekeyedBack#0",
        "tmp%10#1",
        "app#0",
        "globalAllowed#0",
        "tmp%1#1",
        "tmp%2#1"
      ]
    },
    "991": {
      "op": "-",
      "defined_out": [
        "tmp%3#1"
      ],
      "stack_out": [
        "i#0",
        "rekeyedBack#0",
        "tmp%10#1",
        "app#0",
        "globalAllowed#0",
        "tmp%3#1"
      ]
    },
    "992": {
      "op": "frame_dig 0",
      "defined_out": [
        "i#0",
        "tmp%3#1"
      ],
      "stack_out": [
        "i#0",
        "rekeyedBack#0",
        "tmp%10#1",
        "app#0",
        "globalAllowed#0",
        "tmp%3#1",
        "i#0"
      ]
    },
    "994": {
      "op": ">",
      "defined_out": [
        "i#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "i#0",
        "rekeyedBack#0",
        "tmp%10#1",
        "app#0",
        "globalAllowed#0",
        "tmp%4#0"
      ]
    },
    "995": {
      "op": "bz arc58_rekeyToPlugin_block@25",
      "stack_out": [
        "i#0",
        "rekeyedBack#0",
        "tmp%10#1",
        "app#0",
        "globalAllowed#0"
      ]
    },
    "998": {
      "op": "frame_dig 0",
      "stack_out": [
        "i#0",
        "rekeyedBack#0",
        "tmp%10#1",
        "app#0",
        "globalAllowed#0",
        "i#0"
      ]
    },
    "1000": {
      "op": "gtxns Sender",
      "defined_out": [
        "i#0",
        "tmp%5#1"
      ],
      "stack_out": [
        "i#0",
        "rekeyedBack#0",
        "tmp%10#1",
        "app#0",
        "globalAllowed#0",
        "tmp%5#1"
      ]
    },
    "1002": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "i#0",
        "tmp%5#1"
      ],
      "stack_out": [
        "i#0",
        "rekeyedBack#0",
        "tmp%10#1",
        "app#0",
        "globalAllowed#0",
        "tmp%5#1",
        "0"
      ]
    },
    "1003": {
      "op": "bytec_1 // \"c\"",
      "defined_out": [
        "\"c\"",
        "0",
        "i#0",
        "tmp%5#1"
      ],
      "stack_out": [
        "i#0",
        "rekeyedBack#0",
        "tmp%10#1",
        "app#0",
        "globalAllowed#0",
        "tmp%5#1",
        "0",
        "\"c\""
      ]
    },
    "1004": {
      "op": "app_global_get_ex",
      "defined_out": [
        "i#0",
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%5#1"
      ],
      "stack_out": [
        "i#0",
        "rekeyedBack#0",
        "tmp%10#1",
        "app#0",
        "globalAllowed#0",
        "tmp%5#1",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1005": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "i#0",
        "rekeyedBack#0",
        "tmp%10#1",
        "app#0",
        "globalAllowed#0",
        "tmp%5#1",
        "maybe_value%0#0"
      ]
    },
    "1006": {
      "op": "==",
      "defined_out": [
        "i#0",
        "tmp%6#1"
      ],
      "stack_out": [
        "i#0",
        "rekeyedBack#0",
        "tmp%10#1",
        "app#0",
        "globalAllowed#0",
        "tmp%6#1"
      ]
    },
    "1007": {
      "op": "bz arc58_rekeyToPlugin_after_if_else@15",
      "stack_out": [
        "i#0",
        "rekeyedBack#0",
        "tmp%10#1",
        "app#0",
        "globalAllowed#0"
      ]
    },
    "1010": {
      "op": "frame_dig 0",
      "stack_out": [
        "i#0",
        "rekeyedBack#0",
        "tmp%10#1",
        "app#0",
        "globalAllowed#0",
        "i#0"
      ]
    },
    "1012": {
      "op": "gtxns RekeyTo",
      "defined_out": [
        "i#0",
        "tmp%7#1"
      ],
      "stack_out": [
        "i#0",
        "rekeyedBack#0",
        "tmp%10#1",
        "app#0",
        "globalAllowed#0",
        "tmp%7#1"
      ]
    },
    "1014": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "i#0",
        "tmp%7#1",
        "tmp%8#1"
      ],
      "stack_out": [
        "i#0",
        "rekeyedBack#0",
        "tmp%10#1",
        "app#0",
        "globalAllowed#0",
        "tmp%7#1",
        "tmp%8#1"
      ]
    },
    "1016": {
      "op": "==",
      "defined_out": [
        "i#0",
        "tmp%9#1"
      ],
      "stack_out": [
        "i#0",
        "rekeyedBack#0",
        "tmp%10#1",
        "app#0",
        "globalAllowed#0",
        "tmp%9#1"
      ]
    },
    "1017": {
      "op": "bz arc58_rekeyToPlugin_after_if_else@15",
      "stack_out": [
        "i#0",
        "rekeyedBack#0",
        "tmp%10#1",
        "app#0",
        "globalAllowed#0"
      ]
    },
    "1020": {
      "op": "intc_1 // 1",
      "defined_out": [
        "i#0",
        "rekeyedBack#0"
      ],
      "stack_out": [
        "i#0",
        "rekeyedBack#0",
        "tmp%10#1",
        "app#0",
        "globalAllowed#0",
        "rekeyedBack#0"
      ]
    },
    "1021": {
      "op": "frame_bury 1",
      "defined_out": [
        "i#0",
        "rekeyedBack#0"
      ],
      "stack_out": [
        "i#0",
        "rekeyedBack#0",
        "tmp%10#1",
        "app#0",
        "globalAllowed#0"
      ]
    },
    "1023": {
      "block": "arc58_rekeyToPlugin_block@25",
      "stack_in": [
        "i#0",
        "rekeyedBack#0",
        "tmp%10#1",
        "app#0",
        "globalAllowed#0"
      ],
      "op": "frame_dig 1",
      "defined_out": [
        "rekeyedBack#0"
      ],
      "stack_out": [
        "i#0",
        "rekeyedBack#0",
        "tmp%10#1",
        "app#0",
        "globalAllowed#0",
        "rekeyedBack#0"
      ]
    },
    "1025": {
      "op": "assert",
      "stack_out": [
        "i#0",
        "rekeyedBack#0",
        "tmp%10#1",
        "app#0",
        "globalAllowed#0"
      ]
    },
    "1026": {
      "retsub": true,
      "op": "retsub"
    },
    "1027": {
      "block": "arc58_rekeyToPlugin_after_if_else@15",
      "stack_in": [
        "i#0",
        "rekeyedBack#0",
        "tmp%10#1",
        "app#0",
        "globalAllowed#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "i#0"
      ],
      "stack_out": [
        "i#0",
        "rekeyedBack#0",
        "tmp%10#1",
        "app#0",
        "globalAllowed#0",
        "i#0"
      ]
    },
    "1029": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "i#0",
        "tmp%10#1"
      ],
      "stack_out": [
        "i#0",
        "rekeyedBack#0",
        "tmp%10#1",
        "app#0",
        "globalAllowed#0",
        "tmp%10#1"
      ]
    },
    "1031": {
      "op": "dup",
      "stack_out": [
        "i#0",
        "rekeyedBack#0",
        "tmp%10#1",
        "app#0",
        "globalAllowed#0",
        "tmp%10#1",
        "tmp%10#1"
      ]
    },
    "1032": {
      "op": "frame_bury 2",
      "defined_out": [
        "i#0",
        "tmp%10#1"
      ],
      "stack_out": [
        "i#0",
        "rekeyedBack#0",
        "tmp%10#1",
        "app#0",
        "globalAllowed#0",
        "tmp%10#1"
      ]
    },
    "1034": {
      "op": "intc_2 // 6",
      "defined_out": [
        "6",
        "i#0",
        "tmp%10#1"
      ],
      "stack_out": [
        "i#0",
        "rekeyedBack#0",
        "tmp%10#1",
        "app#0",
        "globalAllowed#0",
        "tmp%10#1",
        "6"
      ]
    },
    "1035": {
      "op": "==",
      "defined_out": [
        "i#0",
        "tmp%10#1",
        "tmp%11#1"
      ],
      "stack_out": [
        "i#0",
        "rekeyedBack#0",
        "tmp%10#1",
        "app#0",
        "globalAllowed#0",
        "tmp%11#1"
      ]
    },
    "1036": {
      "op": "bz arc58_rekeyToPlugin_after_if_else@21",
      "stack_out": [
        "i#0",
        "rekeyedBack#0",
        "tmp%10#1",
        "app#0",
        "globalAllowed#0"
      ]
    },
    "1039": {
      "op": "frame_dig 0",
      "stack_out": [
        "i#0",
        "rekeyedBack#0",
        "tmp%10#1",
        "app#0",
        "globalAllowed#0",
        "i#0"
      ]
    },
    "1041": {
      "op": "gtxns ApplicationID",
      "defined_out": [
        "i#0",
        "tmp%10#1",
        "tmp%12#1"
      ],
      "stack_out": [
        "i#0",
        "rekeyedBack#0",
        "tmp%10#1",
        "app#0",
        "globalAllowed#0",
        "tmp%12#1"
      ]
    },
    "1043": {
      "op": "global CurrentApplicationID",
      "defined_out": [
        "i#0",
        "tmp%10#1",
        "tmp%12#1",
        "tmp%13#1"
      ],
      "stack_out": [
        "i#0",
        "rekeyedBack#0",
        "tmp%10#1",
        "app#0",
        "globalAllowed#0",
        "tmp%12#1",
        "tmp%13#1"
      ]
    },
    "1045": {
      "op": "==",
      "defined_out": [
        "i#0",
        "tmp%10#1",
        "tmp%14#1"
      ],
      "stack_out": [
        "i#0",
        "rekeyedBack#0",
        "tmp%10#1",
        "app#0",
        "globalAllowed#0",
        "tmp%14#1"
      ]
    },
    "1046": {
      "op": "bz arc58_rekeyToPlugin_after_if_else@21",
      "stack_out": [
        "i#0",
        "rekeyedBack#0",
        "tmp%10#1",
        "app#0",
        "globalAllowed#0"
      ]
    },
    "1049": {
      "op": "frame_dig 0",
      "stack_out": [
        "i#0",
        "rekeyedBack#0",
        "tmp%10#1",
        "app#0",
        "globalAllowed#0",
        "i#0"
      ]
    },
    "1051": {
      "op": "gtxns OnCompletion",
      "defined_out": [
        "i#0",
        "tmp%10#1",
        "tmp%15#1"
      ],
      "stack_out": [
        "i#0",
        "rekeyedBack#0",
        "tmp%10#1",
        "app#0",
        "globalAllowed#0",
        "tmp%15#1"
      ]
    },
    "1053": {
      "op": "bnz arc58_rekeyToPlugin_after_if_else@21",
      "stack_out": [
        "i#0",
        "rekeyedBack#0",
        "tmp%10#1",
        "app#0",
        "globalAllowed#0"
      ]
    },
    "1056": {
      "op": "frame_dig 0",
      "stack_out": [
        "i#0",
        "rekeyedBack#0",
        "tmp%10#1",
        "app#0",
        "globalAllowed#0",
        "i#0"
      ]
    },
    "1058": {
      "op": "gtxns NumAppArgs",
      "defined_out": [
        "i#0",
        "tmp%10#1",
        "tmp%17#1"
      ],
      "stack_out": [
        "i#0",
        "rekeyedBack#0",
        "tmp%10#1",
        "app#0",
        "globalAllowed#0",
        "tmp%17#1"
      ]
    },
    "1060": {
      "op": "intc_1 // 1",
      "stack_out": [
        "i#0",
        "rekeyedBack#0",
        "tmp%10#1",
        "app#0",
        "globalAllowed#0",
        "tmp%17#1",
        "1"
      ]
    },
    "1061": {
      "op": "==",
      "defined_out": [
        "i#0",
        "tmp%10#1",
        "tmp%18#1"
      ],
      "stack_out": [
        "i#0",
        "rekeyedBack#0",
        "tmp%10#1",
        "app#0",
        "globalAllowed#0",
        "tmp%18#1"
      ]
    },
    "1062": {
      "op": "bz arc58_rekeyToPlugin_after_if_else@21",
      "stack_out": [
        "i#0",
        "rekeyedBack#0",
        "tmp%10#1",
        "app#0",
        "globalAllowed#0"
      ]
    },
    "1065": {
      "op": "frame_dig 0",
      "stack_out": [
        "i#0",
        "rekeyedBack#0",
        "tmp%10#1",
        "app#0",
        "globalAllowed#0",
        "i#0"
      ]
    },
    "1067": {
      "op": "intc_0 // 0",
      "stack_out": [
        "i#0",
        "rekeyedBack#0",
        "tmp%10#1",
        "app#0",
        "globalAllowed#0",
        "i#0",
        "0"
      ]
    },
    "1068": {
      "op": "gtxnsas ApplicationArgs",
      "defined_out": [
        "i#0",
        "tmp%10#1",
        "tmp%19#1"
      ],
      "stack_out": [
        "i#0",
        "rekeyedBack#0",
        "tmp%10#1",
        "app#0",
        "globalAllowed#0",
        "tmp%19#1"
      ]
    },
    "1070": {
      "op": "bytec 5 // method \"arc58_verifyAuthAddr()void\"",
      "defined_out": [
        "Method(arc58_verifyAuthAddr()void)",
        "i#0",
        "tmp%10#1",
        "tmp%19#1"
      ],
      "stack_out": [
        "i#0",
        "rekeyedBack#0",
        "tmp%10#1",
        "app#0",
        "globalAllowed#0",
        "tmp%19#1",
        "Method(arc58_verifyAuthAddr()void)"
      ]
    },
    "1072": {
      "op": "==",
      "defined_out": [
        "i#0",
        "tmp%10#1",
        "tmp%20#1"
      ],
      "stack_out": [
        "i#0",
        "rekeyedBack#0",
        "tmp%10#1",
        "app#0",
        "globalAllowed#0",
        "tmp%20#1"
      ]
    },
    "1073": {
      "op": "bz arc58_rekeyToPlugin_after_if_else@21",
      "stack_out": [
        "i#0",
        "rekeyedBack#0",
        "tmp%10#1",
        "app#0",
        "globalAllowed#0"
      ]
    },
    "1076": {
      "op": "intc_1 // 1",
      "defined_out": [
        "i#0",
        "rekeyedBack#0",
        "tmp%10#1"
      ],
      "stack_out": [
        "i#0",
        "rekeyedBack#0",
        "tmp%10#1",
        "app#0",
        "globalAllowed#0",
        "rekeyedBack#0"
      ]
    },
    "1077": {
      "op": "frame_bury 1",
      "defined_out": [
        "i#0",
        "rekeyedBack#0",
        "tmp%10#1"
      ],
      "stack_out": [
        "i#0",
        "rekeyedBack#0",
        "tmp%10#1",
        "app#0",
        "globalAllowed#0"
      ]
    },
    "1079": {
      "op": "b arc58_rekeyToPlugin_block@25"
    },
    "1082": {
      "block": "arc58_rekeyToPlugin_after_if_else@21",
      "stack_in": [
        "i#0",
        "rekeyedBack#0",
        "tmp%10#1",
        "app#0",
        "globalAllowed#0"
      ],
      "op": "frame_dig 2",
      "defined_out": [
        "tmp%10#1"
      ],
      "stack_out": [
        "i#0",
        "rekeyedBack#0",
        "tmp%10#1",
        "app#0",
        "globalAllowed#0",
        "tmp%10#1"
      ]
    },
    "1084": {
      "op": "intc_2 // 6",
      "defined_out": [
        "6",
        "tmp%10#1"
      ],
      "stack_out": [
        "i#0",
        "rekeyedBack#0",
        "tmp%10#1",
        "app#0",
        "globalAllowed#0",
        "tmp%10#1",
        "6"
      ]
    },
    "1085": {
      "op": "!=",
      "defined_out": [
        "tmp%10#1",
        "tmp%22#1"
      ],
      "stack_out": [
        "i#0",
        "rekeyedBack#0",
        "tmp%10#1",
        "app#0",
        "globalAllowed#0",
        "tmp%22#1"
      ]
    },
    "1086": {
      "op": "bnz arc58_rekeyToPlugin_block@23",
      "stack_out": [
        "i#0",
        "rekeyedBack#0",
        "tmp%10#1",
        "app#0",
        "globalAllowed#0"
      ]
    },
    "1089": {
      "op": "frame_dig 0",
      "defined_out": [
        "i#0",
        "tmp%10#1"
      ],
      "stack_out": [
        "i#0",
        "rekeyedBack#0",
        "tmp%10#1",
        "app#0",
        "globalAllowed#0",
        "i#0"
      ]
    },
    "1091": {
      "op": "dup",
      "defined_out": [
        "i#0",
        "i#0 (copy)",
        "tmp%10#1"
      ],
      "stack_out": [
        "i#0",
        "rekeyedBack#0",
        "tmp%10#1",
        "app#0",
        "globalAllowed#0",
        "i#0",
        "i#0 (copy)"
      ]
    },
    "1092": {
      "op": "gtxns ApplicationID",
      "defined_out": [
        "i#0",
        "tmp%10#1",
        "tmp%23#1"
      ],
      "stack_out": [
        "i#0",
        "rekeyedBack#0",
        "tmp%10#1",
        "app#0",
        "globalAllowed#0",
        "i#0",
        "tmp%23#1"
      ]
    },
    "1094": {
      "op": "frame_dig 3",
      "defined_out": [
        "app#0",
        "i#0",
        "tmp%10#1",
        "tmp%23#1"
      ],
      "stack_out": [
        "i#0",
        "rekeyedBack#0",
        "tmp%10#1",
        "app#0",
        "globalAllowed#0",
        "i#0",
        "tmp%23#1",
        "app#0"
      ]
    },
    "1096": {
      "op": "==",
      "defined_out": [
        "app#0",
        "i#0",
        "tmp%10#1",
        "tmp%24#1"
      ],
      "stack_out": [
        "i#0",
        "rekeyedBack#0",
        "tmp%10#1",
        "app#0",
        "globalAllowed#0",
        "i#0",
        "tmp%24#1"
      ]
    },
    "1097": {
      "error": "Invalid app call",
      "op": "assert // Invalid app call",
      "stack_out": [
        "i#0",
        "rekeyedBack#0",
        "tmp%10#1",
        "app#0",
        "globalAllowed#0",
        "i#0"
      ]
    },
    "1098": {
      "op": "dup",
      "stack_out": [
        "i#0",
        "rekeyedBack#0",
        "tmp%10#1",
        "app#0",
        "globalAllowed#0",
        "i#0",
        "i#0 (copy)"
      ]
    },
    "1099": {
      "op": "gtxns OnCompletion",
      "defined_out": [
        "app#0",
        "i#0",
        "tmp%10#1",
        "tmp%25#1"
      ],
      "stack_out": [
        "i#0",
        "rekeyedBack#0",
        "tmp%10#1",
        "app#0",
        "globalAllowed#0",
        "i#0",
        "tmp%25#1"
      ]
    },
    "1101": {
      "op": "!",
      "defined_out": [
        "app#0",
        "i#0",
        "tmp%10#1",
        "tmp%26#1"
      ],
      "stack_out": [
        "i#0",
        "rekeyedBack#0",
        "tmp%10#1",
        "app#0",
        "globalAllowed#0",
        "i#0",
        "tmp%26#1"
      ]
    },
    "1102": {
      "error": "Invalid onCompletion",
      "op": "assert // Invalid onCompletion",
      "stack_out": [
        "i#0",
        "rekeyedBack#0",
        "tmp%10#1",
        "app#0",
        "globalAllowed#0",
        "i#0"
      ]
    },
    "1103": {
      "op": "dup",
      "stack_out": [
        "i#0",
        "rekeyedBack#0",
        "tmp%10#1",
        "app#0",
        "globalAllowed#0",
        "i#0",
        "i#0 (copy)"
      ]
    },
    "1104": {
      "op": "gtxns NumAppArgs",
      "defined_out": [
        "app#0",
        "i#0",
        "tmp%10#1",
        "tmp%27#1"
      ],
      "stack_out": [
        "i#0",
        "rekeyedBack#0",
        "tmp%10#1",
        "app#0",
        "globalAllowed#0",
        "i#0",
        "tmp%27#1"
      ]
    },
    "1106": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "app#0",
        "i#0",
        "tmp%10#1",
        "tmp%27#1"
      ],
      "stack_out": [
        "i#0",
        "rekeyedBack#0",
        "tmp%10#1",
        "app#0",
        "globalAllowed#0",
        "i#0",
        "tmp%27#1",
        "1"
      ]
    },
    "1107": {
      "op": ">",
      "defined_out": [
        "app#0",
        "i#0",
        "tmp%10#1",
        "tmp%28#1"
      ],
      "stack_out": [
        "i#0",
        "rekeyedBack#0",
        "tmp%10#1",
        "app#0",
        "globalAllowed#0",
        "i#0",
        "tmp%28#1"
      ]
    },
    "1108": {
      "error": "Invalid number of app args",
      "op": "assert // Invalid number of app args",
      "stack_out": [
        "i#0",
        "rekeyedBack#0",
        "tmp%10#1",
        "app#0",
        "globalAllowed#0",
        "i#0"
      ]
    },
    "1109": {
      "op": "intc_1 // 1",
      "stack_out": [
        "i#0",
        "rekeyedBack#0",
        "tmp%10#1",
        "app#0",
        "globalAllowed#0",
        "i#0",
        "1"
      ]
    },
    "1110": {
      "op": "gtxnsas ApplicationArgs",
      "defined_out": [
        "app#0",
        "i#0",
        "tmp%10#1",
        "tmp%29#1"
      ],
      "stack_out": [
        "i#0",
        "rekeyedBack#0",
        "tmp%10#1",
        "app#0",
        "globalAllowed#0",
        "tmp%29#1"
      ]
    },
    "1112": {
      "op": "dup",
      "defined_out": [
        "app#0",
        "i#0",
        "tmp%10#1",
        "tmp%29#1",
        "tmp%29#1 (copy)"
      ],
      "stack_out": [
        "i#0",
        "rekeyedBack#0",
        "tmp%10#1",
        "app#0",
        "globalAllowed#0",
        "tmp%29#1",
        "tmp%29#1 (copy)"
      ]
    },
    "1113": {
      "op": "len",
      "defined_out": [
        "app#0",
        "i#0",
        "tmp%10#1",
        "tmp%29#1",
        "tmp%30#1"
      ],
      "stack_out": [
        "i#0",
        "rekeyedBack#0",
        "tmp%10#1",
        "app#0",
        "globalAllowed#0",
        "tmp%29#1",
        "tmp%30#1"
      ]
    },
    "1114": {
      "op": "pushint 8 // 8",
      "defined_out": [
        "8",
        "app#0",
        "i#0",
        "tmp%10#1",
        "tmp%29#1",
        "tmp%30#1"
      ],
      "stack_out": [
        "i#0",
        "rekeyedBack#0",
        "tmp%10#1",
        "app#0",
        "globalAllowed#0",
        "tmp%29#1",
        "tmp%30#1",
        "8"
      ]
    },
    "1116": {
      "op": "==",
      "defined_out": [
        "app#0",
        "i#0",
        "tmp%10#1",
        "tmp%29#1",
        "tmp%31#1"
      ],
      "stack_out": [
        "i#0",
        "rekeyedBack#0",
        "tmp%10#1",
        "app#0",
        "globalAllowed#0",
        "tmp%29#1",
        "tmp%31#1"
      ]
    },
    "1117": {
      "error": "Invalid app arg length",
      "op": "assert // Invalid app arg length",
      "stack_out": [
        "i#0",
        "rekeyedBack#0",
        "tmp%10#1",
        "app#0",
        "globalAllowed#0",
        "tmp%29#1"
      ]
    },
    "1118": {
      "op": "btoi",
      "defined_out": [
        "app#0",
        "i#0",
        "tmp%10#1",
        "tmp%33#1"
      ],
      "stack_out": [
        "i#0",
        "rekeyedBack#0",
        "tmp%10#1",
        "app#0",
        "globalAllowed#0",
        "tmp%33#1"
      ]
    },
    "1119": {
      "op": "global CurrentApplicationID",
      "defined_out": [
        "app#0",
        "i#0",
        "tmp%10#1",
        "tmp%33#1",
        "tmp%34#1"
      ],
      "stack_out": [
        "i#0",
        "rekeyedBack#0",
        "tmp%10#1",
        "app#0",
        "globalAllowed#0",
        "tmp%33#1",
        "tmp%34#1"
      ]
    },
    "1121": {
      "op": "==",
      "defined_out": [
        "app#0",
        "i#0",
        "tmp%10#1",
        "tmp%35#1"
      ],
      "stack_out": [
        "i#0",
        "rekeyedBack#0",
        "tmp%10#1",
        "app#0",
        "globalAllowed#0",
        "tmp%35#1"
      ]
    },
    "1122": {
      "error": "Invalid app arg",
      "op": "assert // Invalid app arg",
      "stack_out": [
        "i#0",
        "rekeyedBack#0",
        "tmp%10#1",
        "app#0",
        "globalAllowed#0"
      ]
    },
    "1123": {
      "block": "arc58_rekeyToPlugin_block@23",
      "stack_in": [
        "i#0",
        "rekeyedBack#0",
        "tmp%10#1",
        "app#0",
        "globalAllowed#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "i#0"
      ],
      "stack_out": [
        "i#0",
        "rekeyedBack#0",
        "tmp%10#1",
        "app#0",
        "globalAllowed#0",
        "i#0"
      ]
    },
    "1125": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "i#0"
      ],
      "stack_out": [
        "i#0",
        "rekeyedBack#0",
        "tmp%10#1",
        "app#0",
        "globalAllowed#0",
        "i#0",
        "1"
      ]
    },
    "1126": {
      "op": "+",
      "stack_out": [
        "i#0",
        "rekeyedBack#0",
        "tmp%10#1",
        "app#0",
        "globalAllowed#0",
        "i#0"
      ]
    },
    "1127": {
      "op": "frame_bury 0",
      "defined_out": [
        "i#0"
      ],
      "stack_out": [
        "i#0",
        "rekeyedBack#0",
        "tmp%10#1",
        "app#0",
        "globalAllowed#0"
      ]
    },
    "1129": {
      "op": "b arc58_rekeyToPlugin_while_top@11"
    },
    "1132": {
      "block": "arc58_rekeyToPlugin_ternary_false@8",
      "stack_in": [
        "i#0",
        "rekeyedBack#0",
        "tmp%10#1",
        "app#0",
        "globalAllowed#0"
      ],
      "op": "txn Sender",
      "defined_out": [
        "ternary_result%1#0"
      ],
      "stack_out": [
        "i#0",
        "rekeyedBack#0",
        "tmp%10#1",
        "app#0",
        "globalAllowed#0",
        "ternary_result%1#0"
      ]
    },
    "1134": {
      "op": "b arc58_rekeyToPlugin_ternary_merge@9"
    },
    "1137": {
      "subroutine": "contracts/abstracted_account.algo.ts::AbstractedAccount.arc58_rekeyToNamedPlugin",
      "params": {
        "name#0": "bytes"
      },
      "block": "arc58_rekeyToNamedPlugin",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "1140": {
      "op": "frame_dig -1",
      "defined_out": [
        "name#0 (copy)"
      ],
      "stack_out": [
        "name#0 (copy)"
      ]
    },
    "1142": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1145": {
      "op": "bytec 7 // \"n\"",
      "defined_out": [
        "\"n\"",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "\"n\""
      ]
    },
    "1147": {
      "op": "swap",
      "stack_out": [
        "\"n\"",
        "tmp%0#0"
      ]
    },
    "1148": {
      "op": "concat",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "1149": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1150": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "1151": {
      "error": "Index access is out of bounds",
      "op": "extract 0 8 // on error: Index access is out of bounds",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "1154": {
      "callsub": "contracts/abstracted_account.algo.ts::AbstractedAccount.arc58_rekeyToPlugin",
      "op": "callsub arc58_rekeyToPlugin",
      "stack_out": []
    },
    "1157": {
      "retsub": true,
      "op": "retsub"
    },
    "1158": {
      "subroutine": "contracts/abstracted_account.algo.ts::AbstractedAccount.arc58_addPlugin",
      "params": {
        "app#0": "bytes",
        "allowedCaller#0": "bytes",
        "lastValidRound#0": "bytes",
        "cooldown#0": "bytes",
        "adminPrivileges#0": "bytes"
      },
      "block": "arc58_addPlugin",
      "stack_in": [],
      "op": "proto 5 0"
    },
    "1161": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1163": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0"
      ]
    },
    "1164": {
      "op": "bytec_0 // \"a\"",
      "defined_out": [
        "\"a\"",
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0",
        "\"a\""
      ]
    },
    "1165": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1166": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0"
      ]
    },
    "1167": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "1168": {
      "error": "Sender must be the admin",
      "op": "assert // Sender must be the admin",
      "stack_out": []
    },
    "1169": {
      "op": "frame_dig -5",
      "defined_out": [
        "app#0 (copy)"
      ],
      "stack_out": [
        "app#0 (copy)"
      ]
    },
    "1171": {
      "op": "frame_dig -4",
      "defined_out": [
        "allowedCaller#0 (copy)",
        "app#0 (copy)"
      ],
      "stack_out": [
        "app#0 (copy)",
        "allowedCaller#0 (copy)"
      ]
    },
    "1173": {
      "op": "concat",
      "defined_out": [
        "key#0"
      ],
      "stack_out": [
        "key#0"
      ]
    },
    "1174": {
      "op": "frame_dig -3",
      "defined_out": [
        "key#0",
        "lastValidRound#0 (copy)"
      ],
      "stack_out": [
        "key#0",
        "lastValidRound#0 (copy)"
      ]
    },
    "1176": {
      "op": "frame_dig -2",
      "defined_out": [
        "cooldown#0 (copy)",
        "key#0",
        "lastValidRound#0 (copy)"
      ],
      "stack_out": [
        "key#0",
        "lastValidRound#0 (copy)",
        "cooldown#0 (copy)"
      ]
    },
    "1178": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%5#0",
        "key#0"
      ],
      "stack_out": [
        "key#0",
        "encoded_tuple_buffer%5#0"
      ]
    },
    "1179": {
      "op": "bytec_3 // 0x0000000000000000",
      "defined_out": [
        "0x0000000000000000",
        "encoded_tuple_buffer%5#0",
        "key#0"
      ],
      "stack_out": [
        "key#0",
        "encoded_tuple_buffer%5#0",
        "0x0000000000000000"
      ]
    },
    "1180": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%6#0",
        "key#0"
      ],
      "stack_out": [
        "key#0",
        "encoded_tuple_buffer%6#0"
      ]
    },
    "1181": {
      "op": "frame_dig -1",
      "defined_out": [
        "adminPrivileges#0 (copy)",
        "encoded_tuple_buffer%6#0",
        "key#0"
      ],
      "stack_out": [
        "key#0",
        "encoded_tuple_buffer%6#0",
        "adminPrivileges#0 (copy)"
      ]
    },
    "1183": {
      "op": "concat",
      "defined_out": [
        "key#0",
        "value#0"
      ],
      "stack_out": [
        "key#0",
        "value#0"
      ]
    },
    "1184": {
      "op": "bytec_2 // \"p\"",
      "defined_out": [
        "\"p\"",
        "key#0",
        "value#0"
      ],
      "stack_out": [
        "key#0",
        "value#0",
        "\"p\""
      ]
    },
    "1185": {
      "op": "uncover 2",
      "stack_out": [
        "value#0",
        "\"p\"",
        "key#0"
      ]
    },
    "1187": {
      "op": "concat",
      "defined_out": [
        "tmp%2#0",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "tmp%2#0"
      ]
    },
    "1188": {
      "op": "swap",
      "stack_out": [
        "tmp%2#0",
        "value#0"
      ]
    },
    "1189": {
      "op": "box_put",
      "stack_out": []
    },
    "1190": {
      "retsub": true,
      "op": "retsub"
    },
    "1191": {
      "subroutine": "contracts/abstracted_account.algo.ts::AbstractedAccount.arc58_removePlugin",
      "params": {
        "app#0": "bytes",
        "allowedCaller#0": "bytes"
      },
      "block": "arc58_removePlugin",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "1194": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1196": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0"
      ]
    },
    "1197": {
      "op": "bytec_0 // \"a\"",
      "defined_out": [
        "\"a\"",
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0",
        "\"a\""
      ]
    },
    "1198": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1199": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0"
      ]
    },
    "1200": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "1201": {
      "error": "Sender must be the admin",
      "op": "assert // Sender must be the admin",
      "stack_out": []
    },
    "1202": {
      "op": "frame_dig -2",
      "defined_out": [
        "app#0 (copy)"
      ],
      "stack_out": [
        "app#0 (copy)"
      ]
    },
    "1204": {
      "op": "frame_dig -1",
      "defined_out": [
        "allowedCaller#0 (copy)",
        "app#0 (copy)"
      ],
      "stack_out": [
        "app#0 (copy)",
        "allowedCaller#0 (copy)"
      ]
    },
    "1206": {
      "op": "concat",
      "defined_out": [
        "key#0"
      ],
      "stack_out": [
        "key#0"
      ]
    },
    "1207": {
      "op": "bytec_2 // \"p\"",
      "defined_out": [
        "\"p\"",
        "key#0"
      ],
      "stack_out": [
        "key#0",
        "\"p\""
      ]
    },
    "1208": {
      "op": "swap",
      "stack_out": [
        "\"p\"",
        "key#0"
      ]
    },
    "1209": {
      "op": "concat",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "1210": {
      "op": "box_del",
      "defined_out": [
        "{box_del}"
      ],
      "stack_out": [
        "{box_del}"
      ]
    },
    "1211": {
      "op": "pop",
      "stack_out": []
    },
    "1212": {
      "retsub": true,
      "op": "retsub"
    },
    "1213": {
      "subroutine": "contracts/abstracted_account.algo.ts::AbstractedAccount.arc58_addNamedPlugin",
      "params": {
        "name#0": "bytes",
        "app#0": "bytes",
        "allowedCaller#0": "bytes",
        "lastValidRound#0": "bytes",
        "cooldown#0": "bytes",
        "adminPrivileges#0": "bytes"
      },
      "block": "arc58_addNamedPlugin",
      "stack_in": [],
      "op": "proto 6 0"
    },
    "1216": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1218": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0"
      ]
    },
    "1219": {
      "op": "bytec_0 // \"a\"",
      "defined_out": [
        "\"a\"",
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0",
        "\"a\""
      ]
    },
    "1220": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1221": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0"
      ]
    },
    "1222": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "1223": {
      "error": "Sender must be the admin",
      "op": "assert // Sender must be the admin",
      "stack_out": []
    },
    "1224": {
      "op": "frame_dig -6",
      "defined_out": [
        "name#0 (copy)"
      ],
      "stack_out": [
        "name#0 (copy)"
      ]
    },
    "1226": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "1229": {
      "op": "bytec 7 // \"n\"",
      "defined_out": [
        "\"n\"",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "\"n\""
      ]
    },
    "1231": {
      "op": "swap",
      "stack_out": [
        "\"n\"",
        "tmp%2#0"
      ]
    },
    "1232": {
      "op": "concat",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "1233": {
      "op": "dup",
      "defined_out": [
        "tmp%3#0",
        "tmp%3#0 (copy)"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%3#0 (copy)"
      ]
    },
    "1234": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "1235": {
      "op": "bury 1",
      "stack_out": [
        "tmp%3#0",
        "maybe_exists%1#0"
      ]
    },
    "1237": {
      "op": "!",
      "defined_out": [
        "tmp%3#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%4#0"
      ]
    },
    "1238": {
      "op": "assert",
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "1239": {
      "op": "frame_dig -5",
      "defined_out": [
        "app#0 (copy)",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "app#0 (copy)"
      ]
    },
    "1241": {
      "op": "frame_dig -4",
      "defined_out": [
        "allowedCaller#0 (copy)",
        "app#0 (copy)",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "app#0 (copy)",
        "allowedCaller#0 (copy)"
      ]
    },
    "1243": {
      "op": "concat",
      "defined_out": [
        "key#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "key#0"
      ]
    },
    "1244": {
      "op": "swap",
      "stack_out": [
        "key#0",
        "tmp%3#0"
      ]
    },
    "1245": {
      "op": "dig 1",
      "defined_out": [
        "key#0",
        "key#0 (copy)",
        "tmp%3#0"
      ],
      "stack_out": [
        "key#0",
        "tmp%3#0",
        "key#0 (copy)"
      ]
    },
    "1247": {
      "op": "box_put",
      "stack_out": [
        "key#0"
      ]
    },
    "1248": {
      "op": "frame_dig -3",
      "defined_out": [
        "key#0",
        "lastValidRound#0 (copy)"
      ],
      "stack_out": [
        "key#0",
        "lastValidRound#0 (copy)"
      ]
    },
    "1250": {
      "op": "frame_dig -2",
      "defined_out": [
        "cooldown#0 (copy)",
        "key#0",
        "lastValidRound#0 (copy)"
      ],
      "stack_out": [
        "key#0",
        "lastValidRound#0 (copy)",
        "cooldown#0 (copy)"
      ]
    },
    "1252": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%5#0",
        "key#0"
      ],
      "stack_out": [
        "key#0",
        "encoded_tuple_buffer%5#0"
      ]
    },
    "1253": {
      "op": "bytec_3 // 0x0000000000000000",
      "defined_out": [
        "0x0000000000000000",
        "encoded_tuple_buffer%5#0",
        "key#0"
      ],
      "stack_out": [
        "key#0",
        "encoded_tuple_buffer%5#0",
        "0x0000000000000000"
      ]
    },
    "1254": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%6#0",
        "key#0"
      ],
      "stack_out": [
        "key#0",
        "encoded_tuple_buffer%6#0"
      ]
    },
    "1255": {
      "op": "frame_dig -1",
      "defined_out": [
        "adminPrivileges#0 (copy)",
        "encoded_tuple_buffer%6#0",
        "key#0"
      ],
      "stack_out": [
        "key#0",
        "encoded_tuple_buffer%6#0",
        "adminPrivileges#0 (copy)"
      ]
    },
    "1257": {
      "op": "concat",
      "defined_out": [
        "key#0",
        "value#0"
      ],
      "stack_out": [
        "key#0",
        "value#0"
      ]
    },
    "1258": {
      "op": "bytec_2 // \"p\"",
      "defined_out": [
        "\"p\"",
        "key#0",
        "value#0"
      ],
      "stack_out": [
        "key#0",
        "value#0",
        "\"p\""
      ]
    },
    "1259": {
      "op": "uncover 2",
      "stack_out": [
        "value#0",
        "\"p\"",
        "key#0"
      ]
    },
    "1261": {
      "op": "concat",
      "defined_out": [
        "tmp%7#0",
        "value#0"
      ],
      "stack_out": [
        "value#0",
        "tmp%7#0"
      ]
    },
    "1262": {
      "op": "swap",
      "stack_out": [
        "tmp%7#0",
        "value#0"
      ]
    },
    "1263": {
      "op": "box_put",
      "stack_out": []
    },
    "1264": {
      "retsub": true,
      "op": "retsub"
    },
    "1265": {
      "subroutine": "contracts/abstracted_account.algo.ts::AbstractedAccount.arc58_removeNamedPlugin",
      "params": {
        "name#0": "bytes"
      },
      "block": "arc58_removeNamedPlugin",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "1268": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1270": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0"
      ]
    },
    "1271": {
      "op": "bytec_0 // \"a\"",
      "defined_out": [
        "\"a\"",
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0",
        "\"a\""
      ]
    },
    "1272": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1273": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0"
      ]
    },
    "1274": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "1275": {
      "error": "Sender must be the admin",
      "op": "assert // Sender must be the admin",
      "stack_out": []
    },
    "1276": {
      "op": "frame_dig -1",
      "defined_out": [
        "name#0 (copy)"
      ],
      "stack_out": [
        "name#0 (copy)"
      ]
    },
    "1278": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "1281": {
      "op": "bytec 7 // \"n\"",
      "defined_out": [
        "\"n\"",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "\"n\""
      ]
    },
    "1283": {
      "op": "swap",
      "stack_out": [
        "\"n\"",
        "tmp%2#0"
      ]
    },
    "1284": {
      "op": "concat",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "1285": {
      "op": "dup",
      "defined_out": [
        "tmp%3#0",
        "tmp%3#0 (copy)"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%3#0 (copy)"
      ]
    },
    "1286": {
      "op": "box_get",
      "defined_out": [
        "key#0",
        "maybe_exists%1#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "key#0",
        "maybe_exists%1#0"
      ]
    },
    "1287": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "tmp%3#0",
        "key#0"
      ]
    },
    "1288": {
      "op": "swap",
      "stack_out": [
        "key#0",
        "tmp%3#0"
      ]
    },
    "1289": {
      "op": "box_del",
      "defined_out": [
        "key#0",
        "{box_del}"
      ],
      "stack_out": [
        "key#0",
        "{box_del}"
      ]
    },
    "1290": {
      "op": "pop",
      "stack_out": [
        "key#0"
      ]
    },
    "1291": {
      "op": "bytec_2 // \"p\"",
      "defined_out": [
        "\"p\"",
        "key#0"
      ],
      "stack_out": [
        "key#0",
        "\"p\""
      ]
    },
    "1292": {
      "op": "swap",
      "stack_out": [
        "\"p\"",
        "key#0"
      ]
    },
    "1293": {
      "op": "concat",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "1294": {
      "op": "box_del",
      "stack_out": [
        "{box_del}"
      ]
    },
    "1295": {
      "op": "pop",
      "stack_out": []
    },
    "1296": {
      "retsub": true,
      "op": "retsub"
    }
  }
}