/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { AlgorandClientInterface } from '@algorandfoundation/algokit-utils/types/algorand-client-interface'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'
import SimulateResponse = modelsv2.SimulateResponse

export const APP_SPEC: Arc56Contract = {"name":"RecoveryPlugin","structs":{},"methods":[{"name":"createApplication","args":[{"type":"uint64","name":"creator"},{"type":"byte[]","name":"hash"}],"returns":{"type":"void"},"actions":{"create":["NoOp"],"call":[]},"readonly":false,"events":[],"recommendations":{}},{"name":"recover","args":[{"type":"uint64","name":"sender"},{"type":"byte[]","name":"prehash"},{"type":"address","name":"newAdmin"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}}],"arcs":[22,28],"networks":{},"state":{"schema":{"global":{"ints":0,"bytes":2},"local":{"ints":0,"bytes":0}},"keys":{"global":{"creator":{"keyType":"AVMString","valueType":"uint64","key":"Y3JlYXRvcg=="},"hash":{"keyType":"AVMString","valueType":"AVMBytes","key":"aGFzaA=="}},"local":{},"box":{}},"maps":{"global":{},"local":{},"box":{}}},"bareActions":{"create":[],"call":[]},"sourceInfo":{"approval":{"sourceInfo":[{"pc":[51,75],"errorMessage":"OnCompletion is not NoOp"},{"pc":[162],"errorMessage":"application exists"},{"pc":[79],"errorMessage":"can only call when creating"},{"pc":[54],"errorMessage":"can only call when not creating"},{"pc":[112,124,131,158],"errorMessage":"check GlobalState exists"},{"pc":[126],"errorMessage":"prehash mismatch"},{"pc":[116],"errorMessage":"sender mismatch"}],"pcOffsetMethod":"none"},"clear":{"sourceInfo":[],"pcOffsetMethod":"none"}},"source":{"approval":"","clear":"I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="},"byteCode":{"approval":"CiACAAEmAgdjcmVhdG9yBGhhc2gxG0EAFYICBKpsqUAEt+UWTTYaAI4CABoAAiJDMRkURDEYRDYaATYaAlcCADYaA4gAJCNDMRkURDEYFEQ2GgE2GgJXAgCIAAIjQ4oCACiL/mcpi/9niYoDACIoZUSL/RJEi/4BASIpZUQSRLEiKGVEF4AEFHts1rIai/+yGrIYgQayECKyAbMiKGVEF3IIRLFJsiAisghJsgeyACOyECKyAbOJ","clear":"CoEBQw=="},"compilerInfo":{"compiler":"puya","compilerVersion":{"major":4,"minor":4,"patch":4}},"events":[],"templateVariables":{}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


/**
 * The argument types for the RecoveryPlugin contract
 */
export type RecoveryPluginArgs = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'createApplication(uint64,byte[])void': {
      creator: bigint | number
      hash: Uint8Array
    }
    'recover(uint64,byte[],address)void': {
      sender: bigint | number
      prehash: Uint8Array
      newAdmin: string
    }
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'createApplication(uint64,byte[])void': [creator: bigint | number, hash: Uint8Array]
    'recover(uint64,byte[],address)void': [sender: bigint | number, prehash: Uint8Array, newAdmin: string]
  }
}

/**
 * The return type for each method
 */
export type RecoveryPluginReturns = {
  'createApplication(uint64,byte[])void': void
  'recover(uint64,byte[],address)void': void
}

/**
 * Defines the types of available calls and state of the RecoveryPlugin smart contract.
 */
export type RecoveryPluginTypes = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'createApplication(uint64,byte[])void' | 'createApplication', {
      argsObj: RecoveryPluginArgs['obj']['createApplication(uint64,byte[])void']
      argsTuple: RecoveryPluginArgs['tuple']['createApplication(uint64,byte[])void']
      returns: RecoveryPluginReturns['createApplication(uint64,byte[])void']
    }>
    & Record<'recover(uint64,byte[],address)void' | 'recover', {
      argsObj: RecoveryPluginArgs['obj']['recover(uint64,byte[],address)void']
      argsTuple: RecoveryPluginArgs['tuple']['recover(uint64,byte[],address)void']
      returns: RecoveryPluginReturns['recover(uint64,byte[],address)void']
    }>
  /**
   * Defines the shape of the state of the application.
   */
  state: {
    global: {
      keys: {
        creator: bigint
        hash: BinaryState
      }
      maps: {}
    }
  }
}

/**
 * Defines the possible abi call signatures.
 */
export type RecoveryPluginSignatures = keyof RecoveryPluginTypes['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type RecoveryPluginNonVoidMethodSignatures = keyof RecoveryPluginTypes['methods'] extends infer T ? T extends keyof RecoveryPluginTypes['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the RecoveryPlugin smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends RecoveryPluginSignatures> = RecoveryPluginTypes['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the RecoveryPlugin smart contract to the method's return type
 */
export type MethodReturn<TSignature extends RecoveryPluginSignatures> = RecoveryPluginTypes['methods'][TSignature]['returns']

/**
 * Defines the shape of the keyed global state of the application.
 */
export type GlobalKeysState = RecoveryPluginTypes['state']['global']['keys']


/**
 * Defines supported create method params for this smart contract
 */
export type RecoveryPluginCreateCallParams =
  | Expand<CallParams<RecoveryPluginArgs['obj']['createApplication(uint64,byte[])void'] | RecoveryPluginArgs['tuple']['createApplication(uint64,byte[])void']> & {method: 'createApplication'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
  | Expand<CallParams<RecoveryPluginArgs['obj']['createApplication(uint64,byte[])void'] | RecoveryPluginArgs['tuple']['createApplication(uint64,byte[])void']> & {method: 'createApplication(uint64,byte[])void'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines arguments required for the deploy method.
 */
export type RecoveryPluginDeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: RecoveryPluginCreateCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the RecoveryPlugin smart contract
 */
export abstract class RecoveryPluginParamsFactory {
  /**
   * Gets available create ABI call param factories
   */
  static get create() {
    return {
      _resolveByMethod<TParams extends RecoveryPluginCreateCallParams & {method: string}>(params: TParams) {
        switch(params.method) {
          case 'createApplication':
          case 'createApplication(uint64,byte[])void':
            return RecoveryPluginParamsFactory.create.createApplication(params)
        }
        throw new Error(`Unknown ' + verb + ' method`)
      },

      /**
       * Constructs create ABI call params for the RecoveryPlugin smart contract using the createApplication(uint64,byte[])void ABI method
       *
       * @param params Parameters for the call
       * @returns An `AppClientMethodCallParams` object for the call
       */
      createApplication(params: CallParams<RecoveryPluginArgs['obj']['createApplication(uint64,byte[])void'] | RecoveryPluginArgs['tuple']['createApplication(uint64,byte[])void']> & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC}): AppClientMethodCallParams & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC} {
        return {
          ...params,
          method: 'createApplication(uint64,byte[])void' as const,
          args: Array.isArray(params.args) ? params.args : [params.args.creator, params.args.hash],
        }
      },
    }
  }

  /**
   * Constructs a no op call for the recover(uint64,byte[],address)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static recover(params: CallParams<RecoveryPluginArgs['obj']['recover(uint64,byte[],address)void'] | RecoveryPluginArgs['tuple']['recover(uint64,byte[],address)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'recover(uint64,byte[],address)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.sender, params.args.prehash, params.args.newAdmin],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the RecoveryPlugin smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class RecoveryPluginFactory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `RecoveryPluginFactory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }
  
  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }
  
  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }
  
  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClientInterface {
    return this.appFactory.algorand
  }
  
  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new RecoveryPluginClient(this.appFactory.getAppClientById(params))
  }
  
  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new RecoveryPluginClient(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the RecoveryPlugin smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: RecoveryPluginDeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
      createParams: params.createParams?.method ? RecoveryPluginParamsFactory.create._resolveByMethod(params.createParams) : params.createParams ? params.createParams as (RecoveryPluginCreateCallParams & { args: Uint8Array[] }) : undefined,
    })
    return { result: result.result, appClient: new RecoveryPluginClient(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the RecoveryPlugin smart contract using the createApplication(uint64,byte[])void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create params
       */
      createApplication: (params: CallParams<RecoveryPluginArgs['obj']['createApplication(uint64,byte[])void'] | RecoveryPluginArgs['tuple']['createApplication(uint64,byte[])void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        return this.appFactory.params.create(RecoveryPluginParamsFactory.create.createApplication(params))
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the RecoveryPlugin smart contract using the createApplication(uint64,byte[])void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create transaction
       */
      createApplication: (params: CallParams<RecoveryPluginArgs['obj']['createApplication(uint64,byte[])void'] | RecoveryPluginArgs['tuple']['createApplication(uint64,byte[])void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        return this.appFactory.createTransaction.create(RecoveryPluginParamsFactory.create.createApplication(params))
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the RecoveryPlugin smart contract using an ABI method call using the createApplication(uint64,byte[])void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create result
       */
      createApplication: async (params: CallParams<RecoveryPluginArgs['obj']['createApplication(uint64,byte[])void'] | RecoveryPluginArgs['tuple']['createApplication(uint64,byte[])void']> & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        const result = await this.appFactory.send.create(RecoveryPluginParamsFactory.create.createApplication(params))
        return { result: { ...result.result, return: result.result.return as unknown as (undefined | RecoveryPluginReturns['createApplication(uint64,byte[])void']) }, appClient: new RecoveryPluginClient(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the RecoveryPlugin smart contract
 */
export class RecoveryPluginClient {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `RecoveryPluginClient`
   *
   * @param appClient An `AppClient` instance which has been created with the RecoveryPlugin app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `RecoveryPluginClient`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }
  
  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends RecoveryPluginNonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }
  
  /**
   * Returns a new `RecoveryPluginClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<RecoveryPluginClient> {
    return new RecoveryPluginClient(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `RecoveryPluginClient` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<RecoveryPluginClient> {
    return new RecoveryPluginClient(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClientInterface {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Makes a clear_state call to an existing instance of the RecoveryPlugin smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the RecoveryPlugin smart contract using the `recover(uint64,byte[],address)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    recover: (params: CallParams<RecoveryPluginArgs['obj']['recover(uint64,byte[],address)void'] | RecoveryPluginArgs['tuple']['recover(uint64,byte[],address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(RecoveryPluginParamsFactory.recover(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Makes a clear_state call to an existing instance of the RecoveryPlugin smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the RecoveryPlugin smart contract using the `recover(uint64,byte[],address)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    recover: (params: CallParams<RecoveryPluginArgs['obj']['recover(uint64,byte[],address)void'] | RecoveryPluginArgs['tuple']['recover(uint64,byte[],address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(RecoveryPluginParamsFactory.recover(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Makes a clear_state call to an existing instance of the RecoveryPlugin smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the RecoveryPlugin smart contract using the `recover(uint64,byte[],address)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    recover: async (params: CallParams<RecoveryPluginArgs['obj']['recover(uint64,byte[],address)void'] | RecoveryPluginArgs['tuple']['recover(uint64,byte[],address)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(RecoveryPluginParamsFactory.recover(params))
      return {...result, return: result.return as unknown as (undefined | RecoveryPluginReturns['recover(uint64,byte[],address)void'])}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new RecoveryPluginClient(this.appClient.clone(params))
  }

  /**
   * Methods to access state for the current RecoveryPlugin app
   */
  state = {
    /**
     * Methods to access global state for the current RecoveryPlugin app
     */
    global: {
      /**
       * Get all current keyed values from global state
       */
      getAll: async (): Promise<Partial<Expand<GlobalKeysState>>> => {
        const result = await this.appClient.state.global.getAll()
        return {
          creator: result.creator,
          hash: new BinaryStateValue(result.hash),
        }
      },
      /**
       * Get the current value of the creator key in global state
       */
      creator: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("creator")) as bigint | undefined },
      /**
       * Get the current value of the hash key in global state
       */
      hash: async (): Promise<BinaryState> => { return new BinaryStateValue((await this.appClient.state.global.getValue("hash")) as Uint8Array | undefined) },
    },
  }

  public newGroup(): RecoveryPluginComposer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a recover(uint64,byte[],address)void method call against the RecoveryPlugin contract
       */
      recover(params: CallParams<RecoveryPluginArgs['obj']['recover(uint64,byte[],address)void'] | RecoveryPluginArgs['tuple']['recover(uint64,byte[],address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.recover(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a clear state call to the RecoveryPlugin contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as RecoveryPluginComposer
  }
}
export type RecoveryPluginComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the recover(uint64,byte[],address)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  recover(params?: CallParams<RecoveryPluginArgs['obj']['recover(uint64,byte[],address)void'] | RecoveryPluginArgs['tuple']['recover(uint64,byte[],address)void']>): RecoveryPluginComposer<[...TReturns, RecoveryPluginReturns['recover(uint64,byte[],address)void'] | undefined]>

  /**
   * Makes a clear_state call to an existing instance of the RecoveryPlugin smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): RecoveryPluginComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): RecoveryPluginComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): Promise<TransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<RecoveryPluginComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<RecoveryPluginComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<RecoveryPluginComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<RecoveryPluginComposerResults<TReturns>>
}
export type RecoveryPluginComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>

